{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  // Update player whenever players array changes\n  useEffect(() => {\n    if (socket !== null && socket !== void 0 && socket.id && players.length > 0) {\n      const me = players.find(p => p.socketId === socket.id);\n      if (me) {\n        console.log('[GameContext] Updating player from players array:', {\n          playerId: me.socketId,\n          money: me.money\n        });\n        setPlayer(me);\n      }\n    }\n  }, [players, socket === null || socket === void 0 ? void 0 : socket.id]);\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({\n      players: ps,\n      sessionId: sid,\n      currentPlayerId: cid\n    }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({\n      playerId,\n      die1,\n      die2,\n      total\n    }) => {\n      setDiceRoll({\n        playerId,\n        die1,\n        die2,\n        total\n      });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n\n      // Update current player's position if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney\n    }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney,\n        currentPlayerSocketId: socket.id\n      });\n\n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      }));\n    });\n\n    // RENT BONUS\n    socket.on('rentBonus', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      console.log('[GameContext] Updating money after rent bonus:', {\n        playerSocketId,\n        newMoney,\n        currentPlayerSocketId: socket.id\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({\n      playerId,\n      propertyId,\n      action,\n      newMoney\n    }) => {\n      console.log('[GameContext] Property update:', {\n        playerId,\n        propertyId,\n        action,\n        newMoney\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' ? [...(p.properties || []), propertyId] : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add' ? [...(prev.properties || []), propertyId] : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({\n      playerId,\n      playerMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        money: playerMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: playerMoney\n        }));\n      }\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n    });\n\n    // Add loan handling\n    socket.on('loanUpdated', ({\n      playerId,\n      newMoney,\n      loanAmount\n    }) => {\n      console.log('[GameContext] Loan update:', {\n        playerId,\n        newMoney,\n        loanAmount\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            loan: loanAmount\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          loan: loanAmount\n        }));\n      }\n    });\n    socket.on('tradeAccepted', ({\n      fromPlayer,\n      toPlayer\n    }) => {\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === fromPlayer.socketId) {\n          return {\n            ...p,\n            money: fromPlayer.money,\n            properties: fromPlayer.properties\n          };\n        }\n        if (p.socketId === toPlayer.socketId) {\n          return {\n            ...p,\n            money: toPlayer.money,\n            properties: toPlayer.properties\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if they were involved in the trade\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === fromPlayer.socketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: fromPlayer.money,\n          properties: fromPlayer.properties\n        }));\n      } else if ((player === null || player === void 0 ? void 0 : player.socketId) === toPlayer.socketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: toPlayer.money,\n          properties: toPlayer.properties\n        }));\n      }\n    });\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('rentBonus');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n      socket.off('loanUpdated');\n      socket.off('tradeAccepted');\n    };\n  }, [socket === null || socket === void 0 ? void 0 : socket.id, player]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      socket,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone,\n      insufficientFunds,\n      setInsufficientFunds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"ILF+XCB1bEWMGizDXiIHRB7Fn4s=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","socket","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","gameState","setGameState","diceRoll","setDiceRoll","movementDone","setMovementDone","insufficientFunds","setInsufficientFunds","id","length","me","find","p","socketId","console","log","playerId","money","on","updated","ps","sid","cid","nextPlayerId","die1","die2","total","tileId","prev","map","payerSocketId","payerMoney","ownerSocketId","ownerMoney","currentPlayerSocketId","playerSocketId","newMoney","propertyId","action","properties","filter","playerMoney","loanAmount","loan","fromPlayer","toPlayer","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\n\nexport const GameContext = createContext();\n\nexport function GameProvider({ children }) {\n  const [player, setPlayer]               = useState(null);\n  const [players, setPlayers]             = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId]         = useState(null);\n  const [gameState, setGameState]         = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll]           = useState(null);\n  const [movementDone, setMovementDone]   = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  // Update player whenever players array changes\n  useEffect(() => {\n    if (socket?.id && players.length > 0) {\n      const me = players.find(p => p.socketId === socket.id);\n      if (me) {\n        console.log('[GameContext] Updating player from players array:', {\n          playerId: me.socketId,\n          money: me.money\n        });\n        setPlayer(me);\n      }\n    }\n  }, [players, socket?.id]);\n\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({ players: ps, sessionId: sid, currentPlayerId: cid }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({ nextPlayerId }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({ playerId, die1, die2, total }) => {\n      setDiceRoll({ playerId, die1, die2, total });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      setPlayers(prev =>\n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      \n      // Update current player's position if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney,\n        currentPlayerSocketId: socket.id\n      });\n      \n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      }));\n    });\n\n    // RENT BONUS\n    socket.on('rentBonus', ({ playerSocketId, newMoney }) => {\n      console.log('[GameContext] Updating money after rent bonus:', {\n        playerSocketId,\n        newMoney,\n        currentPlayerSocketId: socket.id\n      });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({ playerId, propertyId, action, newMoney }) => {\n      console.log('[GameContext] Property update:', { playerId, propertyId, action, newMoney });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' \n              ? [...(p.properties || []), propertyId]\n              : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add'\n            ? [...(prev.properties || []), propertyId]\n            : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({ playerSocketId, newMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({ playerId, playerMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerId ? { ...p, money: playerMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, money: playerMoney }));\n      }\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({ playerSocketId, newMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n    });\n\n    // Add loan handling\n    socket.on('loanUpdated', ({ playerId, newMoney, loanAmount }) => {\n      console.log('[GameContext] Loan update:', { playerId, newMoney, loanAmount });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            loan: loanAmount\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          loan: loanAmount\n        }));\n      }\n    });\n\n    socket.on('tradeAccepted', ({ fromPlayer, toPlayer }) => {\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === fromPlayer.socketId) {\n          return { ...p, money: fromPlayer.money, properties: fromPlayer.properties };\n        }\n        if (p.socketId === toPlayer.socketId) {\n          return { ...p, money: toPlayer.money, properties: toPlayer.properties };\n        }\n        return p;\n      }));\n\n      // Update current player if they were involved in the trade\n      if (player?.socketId === fromPlayer.socketId) {\n        setPlayer(prev => ({ ...prev, money: fromPlayer.money, properties: fromPlayer.properties }));\n      } else if (player?.socketId === toPlayer.socketId) {\n        setPlayer(prev => ({ ...prev, money: toPlayer.money, properties: toPlayer.properties }));\n      }\n    });\n\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('rentBonus');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n      socket.off('loanUpdated');\n      socket.off('tradeAccepted');\n    };\n  }, [socket?.id, player]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        player,\n        setPlayer,\n        players,\n        setPlayers,\n        currentPlayerId,\n        setCurrentPlayerId,\n        sessionId,\n        setSessionId,\n        socket,\n        gameState,\n        setGameState,\n        diceRoll,\n        setDiceRoll,\n        movementDone,\n        setMovementDone,\n        insufficientFunds,\n        setInsufficientFunds,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}