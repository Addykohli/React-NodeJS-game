{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/GameController.js\nimport { useContext, useEffect } from 'react';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\nconst GameController = () => {\n  _s();\n  const {\n    players,\n    setPlayers,\n    currentPlayerIndex,\n    setCurrentPlayerIndex,\n    originalCount,\n    setOriginalCount,\n    isMoving,\n    setIsMoving\n  } = useContext(GameContext);\n  useEffect(() => {\n    if (originalCount > 0 && !isMoving) {\n      setIsMoving(true);\n      let steps = originalCount;\n      const interval = setInterval(() => {\n        setPlayers(prevPlayers => {\n          const newPlayers = [...prevPlayers];\n          const player = {\n            ...newPlayers[currentPlayerIndex]\n          };\n          const currentTile = tiles[player.tileId || 1];\n          if (!currentTile) {\n            clearInterval(interval);\n            setIsMoving(false);\n            return prevPlayers;\n          }\n          const nextTileId = originalCount > 7 ? currentTile.nextAbove7 : currentTile.nextBelow7;\n          const nextTile = tiles[nextTileId];\n          if (!nextTile) {\n            clearInterval(interval);\n            setIsMoving(false);\n            return prevPlayers;\n          }\n          player.prevTile = player.tileId;\n          player.tileId = nextTileId;\n          newPlayers[currentPlayerIndex] = player;\n          return newPlayers;\n        });\n        steps -= 1;\n        if (steps <= 0) {\n          clearInterval(interval);\n          setTimeout(() => {\n            setIsMoving(false);\n            setOriginalCount(0);\n          }, 300);\n        }\n      }, 500);\n      return () => clearInterval(interval);\n    }\n  }, [originalCount]);\n  return null;\n};\n_s(GameController, \"NhqelVFFDEaPf9Wd0qNYR6hUEjg=\");\n_c = GameController;\nexport default GameController;\nvar _c;\n$RefreshReg$(_c, \"GameController\");","map":{"version":3,"names":["useContext","useEffect","GameContext","tiles","GameController","_s","players","setPlayers","currentPlayerIndex","setCurrentPlayerIndex","originalCount","setOriginalCount","isMoving","setIsMoving","steps","interval","setInterval","prevPlayers","newPlayers","player","currentTile","tileId","clearInterval","nextTileId","nextAbove7","nextBelow7","nextTile","prevTile","setTimeout","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web/client/src/components/GameController.js"],"sourcesContent":["// src/components/GameController.js\r\nimport { useContext, useEffect } from 'react';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { tiles } from '../data/tiles';\r\n\r\nconst GameController = () => {\r\n  const {\r\n    players, setPlayers,\r\n    currentPlayerIndex, setCurrentPlayerIndex,\r\n    originalCount, setOriginalCount,\r\n    isMoving, setIsMoving\r\n  } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (originalCount > 0 && !isMoving) {\r\n      setIsMoving(true);\r\n      let steps = originalCount;\r\n\r\n      const interval = setInterval(() => {\r\n        setPlayers(prevPlayers => {\r\n          const newPlayers = [...prevPlayers];\r\n          const player = { ...newPlayers[currentPlayerIndex] };\r\n          const currentTile = tiles[player.tileId || 1];\r\n\r\n          if (!currentTile) {\r\n            clearInterval(interval);\r\n            setIsMoving(false);\r\n            return prevPlayers;\r\n          }\r\n\r\n          const nextTileId = originalCount > 7 ? currentTile.nextAbove7 : currentTile.nextBelow7;\r\n          const nextTile = tiles[nextTileId];\r\n          if (!nextTile) {\r\n            clearInterval(interval);\r\n            setIsMoving(false);\r\n            return prevPlayers;\r\n          }\r\n\r\n          player.prevTile = player.tileId;\r\n          player.tileId = nextTileId;\r\n          newPlayers[currentPlayerIndex] = player;\r\n          return newPlayers;\r\n        });\r\n\r\n        steps -= 1;\r\n        if (steps <= 0) {\r\n          clearInterval(interval);\r\n          setTimeout(() => {\r\n            setIsMoving(false);\r\n            setOriginalCount(0);\r\n          }, 300);\r\n        }\r\n      }, 500);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [originalCount]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default GameController;\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,KAAK,QAAQ,eAAe;AAErC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IACJC,OAAO;IAAEC,UAAU;IACnBC,kBAAkB;IAAEC,qBAAqB;IACzCC,aAAa;IAAEC,gBAAgB;IAC/BC,QAAQ;IAAEC;EACZ,CAAC,GAAGb,UAAU,CAACE,WAAW,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,IAAIS,aAAa,GAAG,CAAC,IAAI,CAACE,QAAQ,EAAE;MAClCC,WAAW,CAAC,IAAI,CAAC;MACjB,IAAIC,KAAK,GAAGJ,aAAa;MAEzB,MAAMK,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCT,UAAU,CAACU,WAAW,IAAI;UACxB,MAAMC,UAAU,GAAG,CAAC,GAAGD,WAAW,CAAC;UACnC,MAAME,MAAM,GAAG;YAAE,GAAGD,UAAU,CAACV,kBAAkB;UAAE,CAAC;UACpD,MAAMY,WAAW,GAAGjB,KAAK,CAACgB,MAAM,CAACE,MAAM,IAAI,CAAC,CAAC;UAE7C,IAAI,CAACD,WAAW,EAAE;YAChBE,aAAa,CAACP,QAAQ,CAAC;YACvBF,WAAW,CAAC,KAAK,CAAC;YAClB,OAAOI,WAAW;UACpB;UAEA,MAAMM,UAAU,GAAGb,aAAa,GAAG,CAAC,GAAGU,WAAW,CAACI,UAAU,GAAGJ,WAAW,CAACK,UAAU;UACtF,MAAMC,QAAQ,GAAGvB,KAAK,CAACoB,UAAU,CAAC;UAClC,IAAI,CAACG,QAAQ,EAAE;YACbJ,aAAa,CAACP,QAAQ,CAAC;YACvBF,WAAW,CAAC,KAAK,CAAC;YAClB,OAAOI,WAAW;UACpB;UAEAE,MAAM,CAACQ,QAAQ,GAAGR,MAAM,CAACE,MAAM;UAC/BF,MAAM,CAACE,MAAM,GAAGE,UAAU;UAC1BL,UAAU,CAACV,kBAAkB,CAAC,GAAGW,MAAM;UACvC,OAAOD,UAAU;QACnB,CAAC,CAAC;QAEFJ,KAAK,IAAI,CAAC;QACV,IAAIA,KAAK,IAAI,CAAC,EAAE;UACdQ,aAAa,CAACP,QAAQ,CAAC;UACvBa,UAAU,CAAC,MAAM;YACff,WAAW,CAAC,KAAK,CAAC;YAClBF,gBAAgB,CAAC,CAAC,CAAC;UACrB,CAAC,EAAE,GAAG,CAAC;QACT;MACF,CAAC,EAAE,GAAG,CAAC;MAEP,OAAO,MAAMW,aAAa,CAACP,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACL,aAAa,CAAC,CAAC;EAEnB,OAAO,IAAI;AACb,CAAC;AAACL,EAAA,CAtDID,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAwDpB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}