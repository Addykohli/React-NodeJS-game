{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n  const [gameEvents, setGameEvents] = useState([]);\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n  const addGameEvent = event => {\n    setGameEvents(prev => [...prev, {\n      ...event,\n      timestamp: new Date().toLocaleTimeString()\n    }]);\n  };\n\n  // Update player whenever players array changes\n  useEffect(() => {\n    if (socket !== null && socket !== void 0 && socket.id && players.length > 0) {\n      const me = players.find(p => p.socketId === socket.id);\n      if (me) {\n        console.log('[GameContext] Updating player from players array:', {\n          playerId: me.socketId,\n          money: me.money\n        });\n        setPlayer(me);\n      }\n    }\n  }, [players, socket === null || socket === void 0 ? void 0 : socket.id]);\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({\n      players: ps,\n      sessionId: sid,\n      currentPlayerId: cid\n    }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n      setGameEvents([]); // Reset game events on new game\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({\n      playerId,\n      die1,\n      die2,\n      total\n    }) => {\n      setDiceRoll({\n        playerId,\n        die1,\n        die2,\n        total\n      });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n\n      // Update current player's position if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney,\n        currentPlayerSocketId: socket.id\n      });\n\n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      }));\n\n      // Add game event\n      const payer = players.find(p => p.socketId === payerSocketId);\n      const owner = players.find(p => p.socketId === ownerSocketId);\n      addGameEvent({\n        type: 'rent',\n        message: `${payer.name} paid $${amount} rent to ${owner.name} for ${propertyName}`\n      });\n    });\n\n    // RENT BONUS\n    socket.on('rentBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      propertyName\n    }) => {\n      var _players$find;\n      console.log('[GameContext] Updating money after rent bonus:', {\n        playerSocketId,\n        newMoney,\n        currentPlayerSocketId: socket.id\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Add game event\n      const playerName = (_players$find = players.find(p => p.socketId === playerSocketId)) === null || _players$find === void 0 ? void 0 : _players$find.name;\n      addGameEvent({\n        type: 'bonus',\n        message: `${playerName} got bonus $${amount} from their property \"${propertyName}\"`\n      });\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({\n      playerId,\n      propertyId,\n      action,\n      newMoney\n    }) => {\n      var _tiles$find, _players$find2;\n      console.log('[GameContext] Property update:', {\n        playerId,\n        propertyId,\n        action,\n        newMoney\n      });\n\n      // Get property name from tiles data\n      const {\n        tiles\n      } = require('../data/tiles');\n      const propertyName = (_tiles$find = tiles.find(t => t.id === propertyId)) === null || _tiles$find === void 0 ? void 0 : _tiles$find.name;\n      const playerName = (_players$find2 = players.find(p => p.socketId === playerId)) === null || _players$find2 === void 0 ? void 0 : _players$find2.name;\n\n      // Add game event\n      addGameEvent({\n        type: 'property',\n        message: action === 'add' ? `${playerName} bought ${propertyName}` : `${playerName} sold ${propertyName}`\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' ? [...(p.properties || []), propertyId] : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add' ? [...(prev.properties || []), propertyId] : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      reason\n    }) => {\n      var _players$find3;\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n\n      // Add game event\n      const playerName = (_players$find3 = players.find(p => p.socketId === playerSocketId)) === null || _players$find3 === void 0 ? void 0 : _players$find3.name;\n      addGameEvent({\n        type: 'bonus',\n        message: `${playerName} received $${amount} for ${reason} Start!`\n      });\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({\n      playerId,\n      playerMoney,\n      amount,\n      won,\n      playerName\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        money: playerMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: playerMoney\n        }));\n      }\n\n      // Add game event\n      addGameEvent({\n        type: 'casino',\n        message: `${playerName} ${won ? 'won' : 'lost'} $${amount} at the casino`\n      });\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({\n      playerSocketId,\n      newMoney,\n      amount\n    }) => {\n      var _players$find4;\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n\n      // Add game event\n      const playerName = (_players$find4 = players.find(p => p.socketId === playerSocketId)) === null || _players$find4 === void 0 ? void 0 : _players$find4.name;\n      addGameEvent({\n        type: 'road',\n        message: `${playerName} won $${amount} on the road`\n      });\n    });\n\n    // Add loan handling\n    socket.on('loanUpdated', ({\n      playerId,\n      newMoney,\n      loanAmount\n    }) => {\n      console.log('[GameContext] Loan update:', {\n        playerId,\n        newMoney,\n        loanAmount\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            loan: loanAmount\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          loan: loanAmount\n        }));\n      }\n    });\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('rentBonus');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n      socket.off('loanUpdated');\n    };\n  }, [socket === null || socket === void 0 ? void 0 : socket.id, players, player]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      socket,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone,\n      insufficientFunds,\n      setInsufficientFunds,\n      gameEvents\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"hjbcf5gjEu+pqpl6W8HVwdl8YL8=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","socket","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","gameState","setGameState","gameEvents","setGameEvents","diceRoll","setDiceRoll","movementDone","setMovementDone","insufficientFunds","setInsufficientFunds","addGameEvent","event","prev","timestamp","Date","toLocaleTimeString","id","length","me","find","p","socketId","console","log","playerId","money","on","updated","ps","sid","cid","nextPlayerId","die1","die2","total","tileId","map","payerSocketId","payerMoney","ownerSocketId","ownerMoney","amount","propertyName","currentPlayerSocketId","payer","owner","type","message","name","playerSocketId","newMoney","_players$find","playerName","propertyId","action","_tiles$find","_players$find2","tiles","require","t","properties","filter","reason","_players$find3","playerMoney","won","_players$find4","loanAmount","loan","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\n\nexport const GameContext = createContext();\n\nexport function GameProvider({ children }) {\n  const [player, setPlayer]               = useState(null);\n  const [players, setPlayers]             = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId]         = useState(null);\n  const [gameState, setGameState]         = useState('lobby');\n  const [gameEvents, setGameEvents]       = useState([]);\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll]           = useState(null);\n  const [movementDone, setMovementDone]   = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  const addGameEvent = (event) => {\n    setGameEvents(prev => [...prev, { ...event, timestamp: new Date().toLocaleTimeString() }]);\n  };\n\n  // Update player whenever players array changes\n  useEffect(() => {\n    if (socket?.id && players.length > 0) {\n      const me = players.find(p => p.socketId === socket.id);\n      if (me) {\n        console.log('[GameContext] Updating player from players array:', {\n          playerId: me.socketId,\n          money: me.money\n        });\n        setPlayer(me);\n      }\n    }\n  }, [players, socket?.id]);\n\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({ players: ps, sessionId: sid, currentPlayerId: cid }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n      setGameEvents([]); // Reset game events on new game\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({ nextPlayerId }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({ playerId, die1, die2, total }) => {\n      setDiceRoll({ playerId, die1, die2, total });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      setPlayers(prev =>\n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      \n      // Update current player's position if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney, amount, propertyName }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney,\n        currentPlayerSocketId: socket.id\n      });\n      \n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      }));\n\n      // Add game event\n      const payer = players.find(p => p.socketId === payerSocketId);\n      const owner = players.find(p => p.socketId === ownerSocketId);\n      addGameEvent({\n        type: 'rent',\n        message: `${payer.name} paid $${amount} rent to ${owner.name} for ${propertyName}`\n      });\n    });\n\n    // RENT BONUS\n    socket.on('rentBonus', ({ playerSocketId, newMoney, amount, propertyName }) => {\n      console.log('[GameContext] Updating money after rent bonus:', {\n        playerSocketId,\n        newMoney,\n        currentPlayerSocketId: socket.id\n      });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Add game event\n      const playerName = players.find(p => p.socketId === playerSocketId)?.name;\n      addGameEvent({\n        type: 'bonus',\n        message: `${playerName} got bonus $${amount} from their property \"${propertyName}\"`\n      });\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({ playerId, propertyId, action, newMoney }) => {\n      console.log('[GameContext] Property update:', { playerId, propertyId, action, newMoney });\n      \n      // Get property name from tiles data\n      const { tiles } = require('../data/tiles');\n      const propertyName = tiles.find(t => t.id === propertyId)?.name;\n      const playerName = players.find(p => p.socketId === playerId)?.name;\n\n      // Add game event\n      addGameEvent({\n        type: 'property',\n        message: action === 'add' \n          ? `${playerName} bought ${propertyName}`\n          : `${playerName} sold ${propertyName}`\n      });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' \n              ? [...(p.properties || []), propertyId]\n              : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add'\n            ? [...(prev.properties || []), propertyId]\n            : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({ playerSocketId, newMoney, amount, reason }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n\n      // Add game event\n      const playerName = players.find(p => p.socketId === playerSocketId)?.name;\n      addGameEvent({\n        type: 'bonus',\n        message: `${playerName} received $${amount} for ${reason} Start!`\n      });\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({ playerId, playerMoney, amount, won, playerName }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerId ? { ...p, money: playerMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, money: playerMoney }));\n      }\n\n      // Add game event\n      addGameEvent({\n        type: 'casino',\n        message: `${playerName} ${won ? 'won' : 'lost'} $${amount} at the casino`\n      });\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({ playerSocketId, newMoney, amount }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n\n      // Add game event\n      const playerName = players.find(p => p.socketId === playerSocketId)?.name;\n      addGameEvent({\n        type: 'road',\n        message: `${playerName} won $${amount} on the road`\n      });\n    });\n\n    // Add loan handling\n    socket.on('loanUpdated', ({ playerId, newMoney, loanAmount }) => {\n      console.log('[GameContext] Loan update:', { playerId, newMoney, loanAmount });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            loan: loanAmount\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          loan: loanAmount\n        }));\n      }\n    });\n\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('rentBonus');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n      socket.off('loanUpdated');\n    };\n  }, [socket?.id, players, player]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        player,\n        setPlayer,\n        players,\n        setPlayers,\n        currentPlayerId,\n        setCurrentPlayerId,\n        sessionId,\n        setSessionId,\n        socket,\n        gameState,\n        setGameState,\n        diceRoll,\n        setDiceRoll,\n        movementDone,\n        setMovementDone,\n        insufficientFunds,\n        setInsufficientFunds,\n        gameEvents\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAiBV,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAeZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAWhB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAWlB,QAAQ,CAAC,OAAO,CAAC;EAC3D,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAASpB,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACA,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAatB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAKxB,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAEjE,MAAM2B,YAAY,GAAIC,KAAK,IAAK;IAC9BR,aAAa,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAE,GAAGD,KAAK;MAAEE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC;IAAE,CAAC,CAAC,CAAC;EAC5F,CAAC;;EAED;EACA/B,SAAS,CAAC,MAAM;IACd,IAAIC,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+B,EAAE,IAAItB,OAAO,CAACuB,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMC,EAAE,GAAGxB,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKpC,MAAM,CAAC+B,EAAE,CAAC;MACtD,IAAIE,EAAE,EAAE;QACNI,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAE;UAC/DC,QAAQ,EAAEN,EAAE,CAACG,QAAQ;UACrBI,KAAK,EAAEP,EAAE,CAACO;QACZ,CAAC,CAAC;QACFhC,SAAS,CAACyB,EAAE,CAAC;MACf;IACF;EACF,CAAC,EAAE,CAACxB,OAAO,EAAET,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+B,EAAE,CAAC,CAAC;EAEzBhC,SAAS,CAAC,MAAM;IACd;IACAC,MAAM,CAACyC,EAAE,CAAC,aAAa,EAAEC,OAAO,IAAI;MAClChC,UAAU,CAACgC,OAAO,CAAC;IACrB,CAAC,CAAC;;IAEF;IACA1C,MAAM,CAACyC,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEhC,OAAO,EAAEkC,EAAE;MAAE9B,SAAS,EAAE+B,GAAG;MAAEjC,eAAe,EAAEkC;IAAI,CAAC,KAAK;MAChFnC,UAAU,CAACiC,EAAE,CAAC;MACd7B,YAAY,CAAC8B,GAAG,CAAC;MACjB5B,YAAY,CAAC,SAAS,CAAC;MACvBJ,kBAAkB,CAACiC,GAAG,CAAC;MACvBzB,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAC,KAAK,CAAC;MACtBE,oBAAoB,CAAC,KAAK,CAAC;MAC3BN,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;;IAEF;IACAlB,MAAM,CAACyC,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEK;IAAa,CAAC,KAAK;MAC3ClC,kBAAkB,CAACkC,YAAY,CAAC;MAChC1B,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAC,KAAK,CAAC;MACtBE,oBAAoB,CAAC,KAAK,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACAxB,MAAM,CAACyC,EAAE,CAAC,YAAY,EAAE,CAAC;MAAEF,QAAQ;MAAEQ,IAAI;MAAEC,IAAI;MAAEC;IAAM,CAAC,KAAK;MAC3D7B,WAAW,CAAC;QAAEmB,QAAQ;QAAEQ,IAAI;QAAEC,IAAI;QAAEC;MAAM,CAAC,CAAC;IAC9C,CAAC,CAAC;;IAEF;IACAjD,MAAM,CAACyC,EAAE,CAAC,aAAa,EAAE,CAAC;MAAEF,QAAQ;MAAEW;IAAO,CAAC,KAAK;MACjDxC,UAAU,CAACiB,IAAI,IACbA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKG,QAAQ,GAAG;QAAE,GAAGJ,CAAC;QAAEe;MAAO,CAAC,GAAGf,CAAC,CAC9D,CAAC;;MAED;MACA,IAAI,CAAA5B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,QAAQ,MAAKG,QAAQ,EAAE;QACjC/B,SAAS,CAACmB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEuB;QAAO,CAAC,CAAC,CAAC;MAC1C;IACF,CAAC,CAAC;;IAEF;IACAlD,MAAM,CAACyC,EAAE,CAAC,cAAc,EAAE,MAAM;MAC9BnB,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,CAAC;;IAEF;IACAtB,MAAM,CAACyC,EAAE,CAAC,mBAAmB,EAAE,MAAM;MACnCjB,oBAAoB,CAAC,IAAI,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACAxB,MAAM,CAACyC,EAAE,CAAC,UAAU,EAAE,CAAC;MAAEW,aAAa;MAAEC,UAAU;MAAEC,aAAa;MAAEC,UAAU;MAAEC,MAAM;MAAEC;IAAa,CAAC,KAAK;MACxGpB,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAE;QAC9Dc,aAAa;QACbC,UAAU;QACVC,aAAa;QACbC,UAAU;QACVG,qBAAqB,EAAE1D,MAAM,CAAC+B;MAChC,CAAC,CAAC;;MAEF;MACArB,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAAI;QAC/B,IAAIA,CAAC,CAACC,QAAQ,KAAKgB,aAAa,EAAE,OAAO;UAAE,GAAGjB,CAAC;UAAEK,KAAK,EAAEa;QAAW,CAAC;QACpE,IAAIlB,CAAC,CAACC,QAAQ,KAAKkB,aAAa,EAAE,OAAO;UAAE,GAAGnB,CAAC;UAAEK,KAAK,EAAEe;QAAW,CAAC;QACpE,OAAOpB,CAAC;MACV,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMwB,KAAK,GAAGlD,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKgB,aAAa,CAAC;MAC7D,MAAMQ,KAAK,GAAGnD,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKkB,aAAa,CAAC;MAC7D7B,YAAY,CAAC;QACXoC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE,GAAGH,KAAK,CAACI,IAAI,UAAUP,MAAM,YAAYI,KAAK,CAACG,IAAI,QAAQN,YAAY;MAClF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAzD,MAAM,CAACyC,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEuB,cAAc;MAAEC,QAAQ;MAAET,MAAM;MAAEC;IAAa,CAAC,KAAK;MAAA,IAAAS,aAAA;MAC7E7B,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAE;QAC5D0B,cAAc;QACdC,QAAQ;QACRP,qBAAqB,EAAE1D,MAAM,CAAC+B;MAChC,CAAC,CAAC;;MAEF;MACArB,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAC3BA,CAAC,CAACC,QAAQ,KAAK4B,cAAc,GAAG;QAAE,GAAG7B,CAAC;QAAEK,KAAK,EAAEyB;MAAS,CAAC,GAAG9B,CAC9D,CAAC,CAAC;;MAEF;MACA,MAAMgC,UAAU,IAAAD,aAAA,GAAGzD,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK4B,cAAc,CAAC,cAAAE,aAAA,uBAAhDA,aAAA,CAAkDH,IAAI;MACzEtC,YAAY,CAAC;QACXoC,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE,GAAGK,UAAU,eAAeX,MAAM,yBAAyBC,YAAY;MAClF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAzD,MAAM,CAACyC,EAAE,CAAC,iBAAiB,EAAE,CAAC;MAAEF,QAAQ;MAAE6B,UAAU;MAAEC,MAAM;MAAEJ;IAAS,CAAC,KAAK;MAAA,IAAAK,WAAA,EAAAC,cAAA;MAC3ElC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;QAAEC,QAAQ;QAAE6B,UAAU;QAAEC,MAAM;QAAEJ;MAAS,CAAC,CAAC;;MAEzF;MACA,MAAM;QAAEO;MAAM,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;MAC1C,MAAMhB,YAAY,IAAAa,WAAA,GAAGE,KAAK,CAACtC,IAAI,CAACwC,CAAC,IAAIA,CAAC,CAAC3C,EAAE,KAAKqC,UAAU,CAAC,cAAAE,WAAA,uBAApCA,WAAA,CAAsCP,IAAI;MAC/D,MAAMI,UAAU,IAAAI,cAAA,GAAG9D,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKG,QAAQ,CAAC,cAAAgC,cAAA,uBAA1CA,cAAA,CAA4CR,IAAI;;MAEnE;MACAtC,YAAY,CAAC;QACXoC,IAAI,EAAE,UAAU;QAChBC,OAAO,EAAEO,MAAM,KAAK,KAAK,GACrB,GAAGF,UAAU,WAAWV,YAAY,EAAE,GACtC,GAAGU,UAAU,SAASV,YAAY;MACxC,CAAC,CAAC;;MAEF;MACA/C,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAAI;QAC/B,IAAIA,CAAC,CAACC,QAAQ,KAAKG,QAAQ,EAAE;UAC3B,OAAO;YACL,GAAGJ,CAAC;YACJK,KAAK,EAAEyB,QAAQ;YACfU,UAAU,EAAEN,MAAM,KAAK,KAAK,GACxB,CAAC,IAAIlC,CAAC,CAACwC,UAAU,IAAI,EAAE,CAAC,EAAEP,UAAU,CAAC,GACrC,CAACjC,CAAC,CAACwC,UAAU,IAAI,EAAE,EAAEC,MAAM,CAAC7C,EAAE,IAAIA,EAAE,KAAKqC,UAAU;UACzD,CAAC;QACH;QACA,OAAOjC,CAAC;MACV,CAAC,CAAC,CAAC;;MAEH;MACA,IAAI,CAAA5B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,QAAQ,MAAKG,QAAQ,EAAE;QACjC/B,SAAS,CAACmB,IAAI,KAAK;UACjB,GAAGA,IAAI;UACPa,KAAK,EAAEyB,QAAQ;UACfU,UAAU,EAAEN,MAAM,KAAK,KAAK,GACxB,CAAC,IAAI1C,IAAI,CAACgD,UAAU,IAAI,EAAE,CAAC,EAAEP,UAAU,CAAC,GACxC,CAACzC,IAAI,CAACgD,UAAU,IAAI,EAAE,EAAEC,MAAM,CAAC7C,EAAE,IAAIA,EAAE,KAAKqC,UAAU;QAC5D,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC;;IAEF;IACApE,MAAM,CAACyC,EAAE,CAAC,YAAY,EAAE,CAAC;MAAEuB,cAAc;MAAEC,QAAQ;MAAET,MAAM;MAAEqB;IAAO,CAAC,KAAK;MAAA,IAAAC,cAAA;MACxE;MACApE,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAC3BA,CAAC,CAACC,QAAQ,KAAK4B,cAAc,GAAG;QAAE,GAAG7B,CAAC;QAAEK,KAAK,EAAEyB;MAAS,CAAC,GAAG9B,CAC9D,CAAC,CAAC;;MAEF;MACA,IAAI,CAAA5B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,QAAQ,MAAK4B,cAAc,EAAE;QACvCxD,SAAS,CAACmB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEa,KAAK,EAAEyB;QAAS,CAAC,CAAC,CAAC;MACnD;;MAEA;MACA,MAAME,UAAU,IAAAW,cAAA,GAAGrE,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK4B,cAAc,CAAC,cAAAc,cAAA,uBAAhDA,cAAA,CAAkDf,IAAI;MACzEtC,YAAY,CAAC;QACXoC,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE,GAAGK,UAAU,cAAcX,MAAM,QAAQqB,MAAM;MAC1D,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA7E,MAAM,CAACyC,EAAE,CAAC,cAAc,EAAE,CAAC;MAAEF,QAAQ;MAAEwC,WAAW;MAAEvB,MAAM;MAAEwB,GAAG;MAAEb;IAAW,CAAC,KAAK;MAChF;MACAzD,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAC3BA,CAAC,CAACC,QAAQ,KAAKG,QAAQ,GAAG;QAAE,GAAGJ,CAAC;QAAEK,KAAK,EAAEuC;MAAY,CAAC,GAAG5C,CAC3D,CAAC,CAAC;;MAEF;MACA,IAAI,CAAA5B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,QAAQ,MAAKG,QAAQ,EAAE;QACjC/B,SAAS,CAACmB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEa,KAAK,EAAEuC;QAAY,CAAC,CAAC,CAAC;MACtD;;MAEA;MACAtD,YAAY,CAAC;QACXoC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,GAAGK,UAAU,IAAIa,GAAG,GAAG,KAAK,GAAG,MAAM,KAAKxB,MAAM;MAC3D,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAxD,MAAM,CAACyC,EAAE,CAAC,gBAAgB,EAAE,CAAC;MAAEuB,cAAc;MAAEC,QAAQ;MAAET;IAAO,CAAC,KAAK;MAAA,IAAAyB,cAAA;MACpE;MACAvE,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAC3BA,CAAC,CAACC,QAAQ,KAAK4B,cAAc,GAAG;QAAE,GAAG7B,CAAC;QAAEK,KAAK,EAAEyB;MAAS,CAAC,GAAG9B,CAC9D,CAAC,CAAC;;MAEF;MACA,IAAI,CAAA5B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,QAAQ,MAAK4B,cAAc,EAAE;QACvCxD,SAAS,CAACmB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEa,KAAK,EAAEyB;QAAS,CAAC,CAAC,CAAC;MACnD;;MAEA;MACA,MAAME,UAAU,IAAAc,cAAA,GAAGxE,OAAO,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK4B,cAAc,CAAC,cAAAiB,cAAA,uBAAhDA,cAAA,CAAkDlB,IAAI;MACzEtC,YAAY,CAAC;QACXoC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE,GAAGK,UAAU,SAASX,MAAM;MACvC,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAxD,MAAM,CAACyC,EAAE,CAAC,aAAa,EAAE,CAAC;MAAEF,QAAQ;MAAE0B,QAAQ;MAAEiB;IAAW,CAAC,KAAK;MAC/D7C,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;QAAEC,QAAQ;QAAE0B,QAAQ;QAAEiB;MAAW,CAAC,CAAC;;MAE7E;MACAxE,UAAU,CAACiB,IAAI,IAAIA,IAAI,CAACwB,GAAG,CAAChB,CAAC,IAAI;QAC/B,IAAIA,CAAC,CAACC,QAAQ,KAAKG,QAAQ,EAAE;UAC3B,OAAO;YACL,GAAGJ,CAAC;YACJK,KAAK,EAAEyB,QAAQ;YACfkB,IAAI,EAAED;UACR,CAAC;QACH;QACA,OAAO/C,CAAC;MACV,CAAC,CAAC,CAAC;;MAEH;MACA,IAAI,CAAA5B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,QAAQ,MAAKG,QAAQ,EAAE;QACjC/B,SAAS,CAACmB,IAAI,KAAK;UACjB,GAAGA,IAAI;UACPa,KAAK,EAAEyB,QAAQ;UACfkB,IAAI,EAAED;QACR,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXlF,MAAM,CAACoF,GAAG,CAAC,aAAa,CAAC;MACzBpF,MAAM,CAACoF,GAAG,CAAC,WAAW,CAAC;MACvBpF,MAAM,CAACoF,GAAG,CAAC,WAAW,CAAC;MACvBpF,MAAM,CAACoF,GAAG,CAAC,YAAY,CAAC;MACxBpF,MAAM,CAACoF,GAAG,CAAC,aAAa,CAAC;MACzBpF,MAAM,CAACoF,GAAG,CAAC,cAAc,CAAC;MAC1BpF,MAAM,CAACoF,GAAG,CAAC,mBAAmB,CAAC;MAC/BpF,MAAM,CAACoF,GAAG,CAAC,UAAU,CAAC;MACtBpF,MAAM,CAACoF,GAAG,CAAC,WAAW,CAAC;MACvBpF,MAAM,CAACoF,GAAG,CAAC,iBAAiB,CAAC;MAC7BpF,MAAM,CAACoF,GAAG,CAAC,YAAY,CAAC;MACxBpF,MAAM,CAACoF,GAAG,CAAC,cAAc,CAAC;MAC1BpF,MAAM,CAACoF,GAAG,CAAC,gBAAgB,CAAC;MAC5BpF,MAAM,CAACoF,GAAG,CAAC,aAAa,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACpF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+B,EAAE,EAAEtB,OAAO,EAAEF,MAAM,CAAC,CAAC;EAEjC,oBACEL,OAAA,CAACC,WAAW,CAACkF,QAAQ;IACnBC,KAAK,EAAE;MACL/E,MAAM;MACNC,SAAS;MACTC,OAAO;MACPC,UAAU;MACVC,eAAe;MACfC,kBAAkB;MAClBC,SAAS;MACTC,YAAY;MACZd,MAAM;MACNe,SAAS;MACTC,YAAY;MACZG,QAAQ;MACRC,WAAW;MACXC,YAAY;MACZC,eAAe;MACfC,iBAAiB;MACjBC,oBAAoB;MACpBP;IACF,CAAE;IAAAZ,QAAA,EAEDA;EAAQ;IAAAkF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACpF,EAAA,CAjTeF,YAAY;AAAAuF,EAAA,GAAZvF,YAAY;AAAA,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}