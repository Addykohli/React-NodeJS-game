{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [socket] = useState(() => io('http://localhost:3001'));\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [readyPlayers, setReadyPlayers] = useState([]);\n  const [gameState, setGameState] = useState('lobby');\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [originalCount, setOriginalCount] = useState(0);\n  const [diceValues, setDiceValues] = useState([0, 0]);\n  const [isMoving, setIsMoving] = useState(false);\n\n  // Listen for server broadcasts\n  useEffect(() => {\n    socket.on('lobbyUpdate', setPlayers);\n    socket.on('readyUpdate', setReadyPlayers);\n    socket.on('gameStart', () => setGameState('playing'));\n    socket.on('boardUpdate', setPlayers);\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('readyUpdate');\n      socket.off('gameStart');\n      socket.off('boardUpdate');\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      socket,\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      readyPlayers,\n      setReadyPlayers,\n      gameState,\n      setGameState,\n      currentPlayerIndex,\n      setCurrentPlayerIndex,\n      originalCount,\n      setOriginalCount,\n      diceValues,\n      setDiceValues,\n      isMoving,\n      setIsMoving\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"RlaKw2HGVv8eCKtVyfvNjFYh1WI=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","socket","player","setPlayer","players","setPlayers","readyPlayers","setReadyPlayers","gameState","setGameState","currentPlayerIndex","setCurrentPlayerIndex","originalCount","setOriginalCount","diceValues","setDiceValues","isMoving","setIsMoving","on","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [socket] = useState(() => io('http://localhost:3001'));\r\n  const [player, setPlayer] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [readyPlayers, setReadyPlayers] = useState([]);\r\n  const [gameState, setGameState] = useState('lobby');\r\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n  const [originalCount, setOriginalCount] = useState(0);\r\n  const [diceValues, setDiceValues] = useState([0, 0]);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  // Listen for server broadcasts\r\n  useEffect(() => {\r\n    socket.on('lobbyUpdate', setPlayers);\r\n    socket.on('readyUpdate', setReadyPlayers);\r\n    socket.on('gameStart', () => setGameState('playing'));\r\n    socket.on('boardUpdate', setPlayers);\r\n    return () => {\r\n      socket.off('lobbyUpdate');\r\n      socket.off('readyUpdate');\r\n      socket.off('gameStart');\r\n      socket.off('boardUpdate');\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{\r\n      socket,\r\n      player, setPlayer,\r\n      players, setPlayers,\r\n      readyPlayers, setReadyPlayers,\r\n      gameState, setGameState,\r\n      currentPlayerIndex, setCurrentPlayerIndex,\r\n      originalCount, setOriginalCount,\r\n      diceValues, setDiceValues,\r\n      isMoving, setIsMoving\r\n    }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,MAAM,CAAC,GAAGT,QAAQ,CAAC,MAAME,EAAE,CAAC,uBAAuB,CAAC,CAAC;EAC5D,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,OAAO,CAAC;EACnD,MAAM,CAACkB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACdQ,MAAM,CAACiB,EAAE,CAAC,aAAa,EAAEb,UAAU,CAAC;IACpCJ,MAAM,CAACiB,EAAE,CAAC,aAAa,EAAEX,eAAe,CAAC;IACzCN,MAAM,CAACiB,EAAE,CAAC,WAAW,EAAE,MAAMT,YAAY,CAAC,SAAS,CAAC,CAAC;IACrDR,MAAM,CAACiB,EAAE,CAAC,aAAa,EAAEb,UAAU,CAAC;IACpC,OAAO,MAAM;MACXJ,MAAM,CAACkB,GAAG,CAAC,aAAa,CAAC;MACzBlB,MAAM,CAACkB,GAAG,CAAC,aAAa,CAAC;MACzBlB,MAAM,CAACkB,GAAG,CAAC,WAAW,CAAC;MACvBlB,MAAM,CAACkB,GAAG,CAAC,aAAa,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EAEZ,oBACEL,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAC3BpB,MAAM;MACNC,MAAM;MAAEC,SAAS;MACjBC,OAAO;MAAEC,UAAU;MACnBC,YAAY;MAAEC,eAAe;MAC7BC,SAAS;MAAEC,YAAY;MACvBC,kBAAkB;MAAEC,qBAAqB;MACzCC,aAAa;MAAEC,gBAAgB;MAC/BC,UAAU;MAAEC,aAAa;MACzBC,QAAQ;MAAEC;IACZ,CAAE;IAAAlB,QAAA,EACCA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,EAAA,CAxCWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}