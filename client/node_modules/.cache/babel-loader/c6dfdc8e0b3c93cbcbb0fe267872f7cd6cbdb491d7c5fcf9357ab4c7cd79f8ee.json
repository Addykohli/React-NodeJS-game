{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\components\\\\GameScreen.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport bgImage from '../assets/bg.png';\nimport Dicebox from '../assets/diceBoard.png';\nimport startIcon from '../assets/start.png';\nimport hotelIcon from '../assets/hotel.png';\nimport casinoIcon from '../assets/casino.png';\nimport roadIcon from '../assets/road.png';\nimport Board from './Board';\nimport DiceRoller from './DiceRoller';\nimport Dashboard from './Dashboard';\nimport PlayerStats from './PlayerStats';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CasinoBetting = ({\n  isMyTurn,\n  currentMoney,\n  socket,\n  player\n}) => {\n  _s();\n  const [betAmount, setBetAmount] = useState(1000);\n  const [selectedBet, setSelectedBet] = useState(null);\n  const [showResult, setShowResult] = useState(null);\n  const [diceResult, setDiceResult] = useState(null);\n  const [isActive, setIsActive] = useState(true);\n  const handleAmountChange = delta => {\n    const newAmount = Math.max(1000, Math.min(currentMoney, betAmount + delta));\n    setBetAmount(newAmount);\n  };\n  const handleBetSelect = bet => {\n    setSelectedBet(bet);\n  };\n  const handleRoll = () => {\n    if (selectedBet && betAmount >= 1000 && betAmount <= currentMoney) {\n      socket.emit('casinoRoll', {\n        betAmount,\n        betType: selectedBet\n      });\n    }\n  };\n  useEffect(() => {\n    const handleCasinoResult = ({\n      playerId,\n      dice,\n      amount,\n      won,\n      playerMoney\n    }) => {\n      if (playerId === player.socketId) {\n        setDiceResult(dice);\n        setShowResult({\n          won,\n          amount\n        });\n        setIsActive(false);\n      }\n    };\n    socket.on('casinoResult', handleCasinoResult);\n    return () => socket.off('casinoResult', handleCasinoResult);\n  }, [socket, player.socketId]);\n\n  // If not active (after result), show nothing\n  if (!isActive) {\n    if (showResult && diceResult) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px',\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/dice/dice${diceResult[0]}.png`,\n            alt: `Die ${diceResult[0]}`,\n            width: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/dice/dice${diceResult[1]}.png`,\n            alt: `Die ${diceResult[1]}`,\n            width: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: showResult.won ? '#4CAF50' : '#f44336',\n            fontWeight: 'bold',\n            fontSize: '1.2em'\n          },\n          children: showResult.won ? `You won $${showResult.amount}!` : `You lost $${showResult.amount}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      gap: '15px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAmountChange(-1000),\n        disabled: !isMyTurn || betAmount <= 1000,\n        style: {\n          padding: '8px 12px',\n          fontSize: '1.2em',\n          cursor: isMyTurn ? 'pointer' : 'not-allowed'\n        },\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 16px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          minWidth: '100px',\n          textAlign: 'center'\n        },\n        children: [\"$\", betAmount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAmountChange(1000),\n        disabled: !isMyTurn || betAmount >= currentMoney,\n        style: {\n          padding: '8px 12px',\n          fontSize: '1.2em',\n          cursor: isMyTurn ? 'pointer' : 'not-allowed'\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '10px'\n      },\n      children: ['above', '7', 'below'].map(bet => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBetSelect(bet),\n        disabled: !isMyTurn,\n        style: {\n          padding: '8px 16px',\n          backgroundColor: selectedBet === bet ? '#4CAF50' : '#fff',\n          color: selectedBet === bet ? '#fff' : '#000',\n          border: '1px solid #666',\n          borderRadius: '4px',\n          cursor: isMyTurn ? 'pointer' : 'not-allowed',\n          textTransform: 'capitalize'\n        },\n        children: bet\n      }, bet, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRoll,\n      disabled: !isMyTurn || !selectedBet || betAmount < 1000 || betAmount > currentMoney,\n      style: {\n        padding: '8px 24px',\n        backgroundColor: '#2196F3',\n        color: '#fff',\n        border: 'none',\n        borderRadius: '4px',\n        marginTop: '10px',\n        cursor: isMyTurn && selectedBet ? 'pointer' : 'not-allowed',\n        opacity: isMyTurn && selectedBet ? 1 : 0.7\n      },\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(CasinoBetting, \"1erwuWbl18mQT2wIK6glrgWb/ks=\");\n_c = CasinoBetting;\nexport default function GameScreen() {\n  _s2();\n  const {\n    player,\n    players,\n    setPlayer,\n    setPlayers,\n    currentPlayerId,\n    socket,\n    movementDone\n  } = useContext(GameContext);\n  const isMyTurn = (player === null || player === void 0 ? void 0 : player.socketId) === currentPlayerId;\n  const [error, setError] = useState(null);\n  const [testRollInput, setTestRollInput] = useState('');\n  const [testRollMode, setTestRollMode] = useState(false);\n\n  // Determine metadata for the current tile\n  const tileMeta = tiles.find(t => t.id === (player === null || player === void 0 ? void 0 : player.tileId));\n\n  // Add keyboard listener for test rolls\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (!isMyTurn) return;\n\n      // Build up the test roll input\n      if (e.key === 'Enter' && testRollInput.startsWith('testroll')) {\n        const rollNumber = parseInt(testRollInput.slice(8));\n        if (!isNaN(rollNumber) && rollNumber >= 2 && rollNumber <= 12) {\n          socket.emit('rollDice', {\n            testRoll: rollNumber\n          });\n          setTestRollInput('');\n          setTestRollMode(false);\n        }\n      } else if (e.key === 'Backspace') {\n        setTestRollInput(prev => prev.slice(0, -1));\n      } else if (e.key.length === 1) {\n        // Regular character\n        setTestRollInput(prev => prev + e.key);\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isMyTurn, testRollInput, socket]);\n\n  // Show current test roll input if active\n  useEffect(() => {\n    if (testRollInput.startsWith('testroll')) {\n      setTestRollMode(true);\n    } else if (testRollInput.length === 0) {\n      setTestRollMode(false);\n    }\n  }, [testRollInput]);\n\n  // Debug logging to trace condition\n  useEffect(() => {\n    console.log('[GameScreen] Debug:', {\n      isMyTurn,\n      movementDone,\n      tileMeta,\n      \"player.tileId\": player === null || player === void 0 ? void 0 : player.tileId,\n      \"tileMeta.type\": tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.type,\n      \"tileMeta.cost\": tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.cost,\n      \"player.money\": player === null || player === void 0 ? void 0 : player.money,\n      testRollMode,\n      testRollInput\n    });\n  }, [isMyTurn, movementDone, tileMeta, player, testRollMode, testRollInput]);\n\n  // Listen for purchase events\n  useEffect(() => {\n    socket.on('purchaseSuccess', ({\n      socketId,\n      money,\n      properties\n    }) => {\n      console.log('[GameScreen] purchaseSuccess', {\n        socketId,\n        money,\n        properties\n      });\n      const updated = players.map(p => p.socketId === socketId ? {\n        ...p,\n        money,\n        properties\n      } : p);\n      setPlayers(updated);\n      if (player.socketId === socketId) {\n        setPlayer({\n          ...player,\n          money,\n          properties\n        });\n      }\n      setError(null);\n    });\n\n    // Add start bonus handler\n    socket.on('startBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      reason\n    }) => {\n      console.log('[GameScreen] startBonus', {\n        playerSocketId,\n        newMoney,\n        amount,\n        reason\n      });\n\n      // Update players' money\n      const updated = players.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p);\n      setPlayers(updated);\n\n      // Update current player's money if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({\n          ...player,\n          money: newMoney\n        });\n        setError(`You received $${amount} for ${reason} Start!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add playerMoved event handler\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      console.log('[GameScreen] playerMoved', {\n        playerId,\n        tileId\n      });\n      if (playerId === (player === null || player === void 0 ? void 0 : player.socketId)) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n      // Clear any previous messages when a player moves\n      setError(null);\n    });\n    socket.on('purchaseFailed', ({\n      reason\n    }) => {\n      console.log('[GameScreen] purchaseFailed', reason);\n      if (reason === 'insufficientFunds') {\n        setError(\"You don't have enough money.\");\n      } else if (reason === 'alreadyOwned') {\n        setError('You already own this property.');\n      } else {\n        setError('Cannot buy this property.');\n      }\n      // Clear error message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent payment handler\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameScreen] rentPaid', {\n        payerSocketId,\n        ownerSocketId,\n        amount\n      });\n\n      // Update players' money\n      const updated = players.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      });\n      setPlayers(updated);\n\n      // Update current player's money if they were involved\n      if (player.socketId === payerSocketId) {\n        var _players$find;\n        setPlayer({\n          ...player,\n          money: payerMoney\n        });\n        setError(`You paid $${amount} rent to ${(_players$find = players.find(p => p.socketId === ownerSocketId)) === null || _players$find === void 0 ? void 0 : _players$find.name} for landing on ${propertyName}`);\n      } else if (player.socketId === ownerSocketId) {\n        var _players$find2;\n        setPlayer({\n          ...player,\n          money: ownerMoney\n        });\n        setError(`You received $${amount} rent from ${(_players$find2 = players.find(p => p.socketId === payerSocketId)) === null || _players$find2 === void 0 ? void 0 : _players$find2.name} for ${propertyName}`);\n      }\n      // Clear rent message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent bonus handler\n    socket.on('rentBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameScreen] rentBonus', {\n        playerSocketId,\n        amount\n      });\n\n      // Update player's money\n      const updated = players.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p);\n      setPlayers(updated);\n\n      // Update current player if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({\n          ...player,\n          money: newMoney\n        });\n        setError(`You received $${amount} bonus for landing on your property ${propertyName}!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add casino result handler for other players\n    socket.on('casinoResult', ({\n      playerId,\n      dice,\n      amount,\n      won,\n      playerName,\n      playerMoney\n    }) => {\n      console.log('[GameScreen] casinoResult', {\n        playerId,\n        dice,\n        amount,\n        won,\n        playerName,\n        playerMoney\n      });\n\n      // Update player money in the game state\n      const updated = players.map(p => p.socketId === playerId ? {\n        ...p,\n        money: playerMoney\n      } : p);\n      setPlayers(updated);\n      if (player.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: playerMoney\n        }));\n      } else {\n        setError(`${playerName} ${won ? 'won' : 'lost'} $${amount} at the casino!`);\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n    return () => {\n      socket.off('purchaseSuccess');\n      socket.off('purchaseFailed');\n      socket.off('rentPaid');\n      socket.off('playerMoved');\n      socket.off('rentBonus');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n    };\n  }, [socket, player, players, setPlayer, setPlayers]);\n\n  // Add state to track if we're currently in casino\n  const [inCasino, setInCasino] = useState(false);\n\n  // Update inCasino state when tile changes\n  useEffect(() => {\n    setInCasino((tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.id) === 16);\n  }, [tileMeta]);\n\n  // Reset casino state when turn ends\n  useEffect(() => {\n    if (!isMyTurn) {\n      setInCasino(false);\n    }\n  }, [isMyTurn]);\n  const handleBuy = () => {\n    console.log('[GameScreen] handleBuy invoked');\n    setError(null);\n    socket.emit('buyProperty');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      position: 'relative',\n      backgroundImage: `url(${bgImage})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '240px',\n        display: 'flex',\n        zIndex: 100,\n        background: 'rgba(80, 80, 80, 0.61)',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.2)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          position: 'relative',\n          height: '100%',\n          borderRight: '1px solid #333',\n          overflow: 'hidden'\n        },\n        children: [isMyTurn && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: Dicebox,\n            alt: \"Dice Board\",\n            style: {\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              objectFit: 'fill',\n              pointerEvents: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), testRollMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              color: '#fff',\n              padding: '8px 16px',\n              borderRadius: '4px',\n              zIndex: 100\n            },\n            children: testRollInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(DiceRoller, {\n          testRollMode: testRollMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          borderRight: '1px solid #333',\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: (() => {\n          // Check if any player owns this property\n          const isPropertyOwned = players.some(p => p.properties.includes(tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.id));\n          const show = isMyTurn && movementDone && (tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.type) === 'property' && !isPropertyOwned;\n          console.log('[GameScreen] isMyTurn?', isMyTurn);\n          console.log('[GameScreen] movementDone?', movementDone);\n          console.log('[GameScreen] tileMeta)?', tileMeta);\n          console.log('[GameScreen] isPropertyOwned?', isPropertyOwned);\n          console.log('[GameScreen] render Buy?', show);\n          return show ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleBuy,\n              disabled: player.money < tileMeta.cost,\n              style: {\n                padding: '8px 16px',\n                margin: '4px'\n              },\n              children: [\"Buy ($\", tileMeta.cost, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'tomato',\n                marginTop: '8px'\n              },\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'tomato',\n              marginTop: '8px'\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 24\n          }, this);\n        })()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          borderRight: '1px solid #333',\n          height: '100%',\n          position: 'relative'\n        },\n        children: (_tileMeta$name => {\n          const isCornerChoice = isMyTurn && movementDone && (tileMeta === null || tileMeta === void 0 ? void 0 : (_tileMeta$name = tileMeta.name) === null || _tileMeta$name === void 0 ? void 0 : _tileMeta$name.toLowerCase().includes('choose corner'));\n          if (isCornerChoice) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'grid',\n                gridTemplateColumns: '1fr 1fr',\n                gridTemplateRows: '1fr 1fr',\n                gap: '4px',\n                width: '100%',\n                height: '100%',\n                padding: '4px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 1,\n                    prevTile: 30\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Start\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 7,\n                    prevTile: 6\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Hotel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 16,\n                    prevTile: 15\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Casino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 628,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 22,\n                    prevTile: 21\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Road\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 664,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 17\n            }, this);\n          } else if (inCasino) {\n            return /*#__PURE__*/_jsxDEV(CasinoBetting, {\n              isMyTurn: isMyTurn,\n              currentMoney: (player === null || player === void 0 ? void 0 : player.money) || 0,\n              socket: socket,\n              player: player\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 22\n            }, this);\n          }\n          return null;\n        })()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '240px',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minWidth: 220,\n          height: '80%',\n          marginRight: 48,\n          background: 'rgba(206, 206, 206, 0.96)',\n          borderRight: '2px solid #d3d3d3',\n          borderRadius: 12,\n          boxShadow: '0 0 12px 0 #eee',\n          padding: '16px 10px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'stretch'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            textAlign: 'center',\n            margin: 0,\n            marginBottom: 10\n          },\n          children: \"Other Players\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PlayerStats, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          zIndex: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        background: 'rgba(80, 80, 80, 0.61)',\n        borderTop: '2px solid #bbb',\n        boxShadow: '0 -2px 10px #ececec',\n        padding: '0 0 18px 0',\n        zIndex: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n}\n_s2(GameScreen, \"w6F/m8ynxKRZWUUDSCa+C0KA0h4=\");\n_c2 = GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"CasinoBetting\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","useContext","useState","useEffect","bgImage","Dicebox","startIcon","hotelIcon","casinoIcon","roadIcon","Board","DiceRoller","Dashboard","PlayerStats","GameContext","tiles","jsxDEV","_jsxDEV","Fragment","_Fragment","CasinoBetting","isMyTurn","currentMoney","socket","player","_s","betAmount","setBetAmount","selectedBet","setSelectedBet","showResult","setShowResult","diceResult","setDiceResult","isActive","setIsActive","handleAmountChange","delta","newAmount","Math","max","min","handleBetSelect","bet","handleRoll","emit","betType","handleCasinoResult","playerId","dice","amount","won","playerMoney","socketId","on","off","style","display","flexDirection","alignItems","justifyContent","height","gap","children","src","alt","width","fileName","_jsxFileName","lineNumber","columnNumber","color","fontWeight","fontSize","onClick","disabled","padding","cursor","border","borderRadius","minWidth","textAlign","map","backgroundColor","textTransform","marginTop","opacity","_c","GameScreen","_s2","players","setPlayer","setPlayers","currentPlayerId","movementDone","error","setError","testRollInput","setTestRollInput","testRollMode","setTestRollMode","tileMeta","find","t","id","tileId","handleKeyPress","e","key","startsWith","rollNumber","parseInt","slice","isNaN","testRoll","prev","length","window","addEventListener","removeEventListener","console","log","type","cost","money","properties","updated","p","playerSocketId","newMoney","reason","setTimeout","payerSocketId","payerMoney","ownerSocketId","ownerMoney","propertyName","_players$find","name","_players$find2","playerName","inCasino","setInCasino","handleBuy","minHeight","position","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","overflow","top","left","zIndex","background","boxShadow","flex","borderRight","objectFit","pointerEvents","transform","isPropertyOwned","some","includes","show","margin","_tileMeta$name","isCornerChoice","toLowerCase","gridTemplateColumns","gridTemplateRows","toTile","prevTile","textShadow","bottom","marginRight","marginBottom","borderTop","_c2","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/components/GameScreen.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport bgImage from '../assets/bg.png';\nimport Dicebox from '../assets/diceBoard.png';\nimport startIcon from '../assets/start.png';\nimport hotelIcon from '../assets/hotel.png';\nimport casinoIcon from '../assets/casino.png';\nimport roadIcon from '../assets/road.png';\nimport Board from './Board';\nimport DiceRoller from './DiceRoller';\nimport Dashboard from './Dashboard';\nimport PlayerStats from './PlayerStats';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\n\nconst CasinoBetting = ({ isMyTurn, currentMoney, socket, player }) => {\n  const [betAmount, setBetAmount] = useState(1000);\n  const [selectedBet, setSelectedBet] = useState(null);\n  const [showResult, setShowResult] = useState(null);\n  const [diceResult, setDiceResult] = useState(null);\n  const [isActive, setIsActive] = useState(true);\n\n  const handleAmountChange = (delta) => {\n    const newAmount = Math.max(1000, Math.min(currentMoney, betAmount + delta));\n    setBetAmount(newAmount);\n  };\n\n  const handleBetSelect = (bet) => {\n    setSelectedBet(bet);\n  };\n\n  const handleRoll = () => {\n    if (selectedBet && betAmount >= 1000 && betAmount <= currentMoney) {\n      socket.emit('casinoRoll', { betAmount, betType: selectedBet });\n    }\n  };\n\n  useEffect(() => {\n    const handleCasinoResult = ({ playerId, dice, amount, won, playerMoney }) => {\n      if (playerId === player.socketId) {\n        setDiceResult(dice);\n        setShowResult({ won, amount });\n        setIsActive(false);\n      }\n    };\n\n    socket.on('casinoResult', handleCasinoResult);\n    return () => socket.off('casinoResult', handleCasinoResult);\n  }, [socket, player.socketId]);\n\n  // If not active (after result), show nothing\n  if (!isActive) {\n    if (showResult && diceResult) {\n      return (\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%',\n          gap: '20px'\n        }}>\n          <div style={{\n            display: 'flex',\n            gap: '10px',\n            justifyContent: 'center'\n          }}>\n            <img src={`/dice/dice${diceResult[0]}.png`} alt={`Die ${diceResult[0]}`} width={50} />\n            <img src={`/dice/dice${diceResult[1]}.png`} alt={`Die ${diceResult[1]}`} width={50} />\n          </div>\n          <div style={{\n            color: showResult.won ? '#4CAF50' : '#f44336',\n            fontWeight: 'bold',\n            fontSize: '1.2em'\n          }}>\n            {showResult.won ? `You won $${showResult.amount}!` : `You lost $${showResult.amount}`}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      gap: '15px'\n    }}>\n      {/* Bet amount control */}\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px'\n      }}>\n        <button\n          onClick={() => handleAmountChange(-1000)}\n          disabled={!isMyTurn || betAmount <= 1000}\n          style={{\n            padding: '8px 12px',\n            fontSize: '1.2em',\n            cursor: isMyTurn ? 'pointer' : 'not-allowed'\n          }}\n        >\n          -\n        </button>\n        <div style={{\n          padding: '8px 16px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          minWidth: '100px',\n          textAlign: 'center'\n        }}>\n          ${betAmount}\n        </div>\n        <button\n          onClick={() => handleAmountChange(1000)}\n          disabled={!isMyTurn || betAmount >= currentMoney}\n          style={{\n            padding: '8px 12px',\n            fontSize: '1.2em',\n            cursor: isMyTurn ? 'pointer' : 'not-allowed'\n          }}\n        >\n          +\n        </button>\n      </div>\n\n      {/* Bet type buttons */}\n      <div style={{\n        display: 'flex',\n        gap: '10px'\n      }}>\n        {['above', '7', 'below'].map(bet => (\n          <button\n            key={bet}\n            onClick={() => handleBetSelect(bet)}\n            disabled={!isMyTurn}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: selectedBet === bet ? '#4CAF50' : '#fff',\n              color: selectedBet === bet ? '#fff' : '#000',\n              border: '1px solid #666',\n              borderRadius: '4px',\n              cursor: isMyTurn ? 'pointer' : 'not-allowed',\n              textTransform: 'capitalize'\n            }}\n          >\n            {bet}\n          </button>\n        ))}\n      </div>\n\n      {/* Roll button */}\n      <button\n        onClick={handleRoll}\n        disabled={!isMyTurn || !selectedBet || betAmount < 1000 || betAmount > currentMoney}\n        style={{\n          padding: '8px 24px',\n          backgroundColor: '#2196F3',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          marginTop: '10px',\n          cursor: isMyTurn && selectedBet ? 'pointer' : 'not-allowed',\n          opacity: isMyTurn && selectedBet ? 1 : 0.7\n        }}\n      >\n        Roll\n      </button>\n    </div>\n  );\n};\n\nexport default function GameScreen() {\n  const {\n    player,\n    players,\n    setPlayer,\n    setPlayers,\n    currentPlayerId,\n    socket,\n    movementDone\n  } = useContext(GameContext);\n\n  const isMyTurn = player?.socketId === currentPlayerId;\n  const [error, setError] = useState(null);\n  const [testRollInput, setTestRollInput] = useState('');\n  const [testRollMode, setTestRollMode] = useState(false);\n\n  // Determine metadata for the current tile\n  const tileMeta = tiles.find(t => t.id === player?.tileId);\n\n  // Add keyboard listener for test rolls\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (!isMyTurn) return;\n\n      // Build up the test roll input\n      if (e.key === 'Enter' && testRollInput.startsWith('testroll')) {\n        const rollNumber = parseInt(testRollInput.slice(8));\n        if (!isNaN(rollNumber) && rollNumber >= 2 && rollNumber <= 12) {\n          socket.emit('rollDice', { testRoll: rollNumber });\n          setTestRollInput('');\n          setTestRollMode(false);\n        }\n      } else if (e.key === 'Backspace') {\n        setTestRollInput(prev => prev.slice(0, -1));\n      } else if (e.key.length === 1) { // Regular character\n        setTestRollInput(prev => prev + e.key);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isMyTurn, testRollInput, socket]);\n\n  // Show current test roll input if active\n  useEffect(() => {\n    if (testRollInput.startsWith('testroll')) {\n      setTestRollMode(true);\n    } else if (testRollInput.length === 0) {\n      setTestRollMode(false);\n    }\n  }, [testRollInput]);\n\n  // Debug logging to trace condition\n  useEffect(() => {\n    console.log('[GameScreen] Debug:', {\n      isMyTurn,\n      movementDone,\n      tileMeta,\n      \"player.tileId\": player?.tileId,\n      \"tileMeta.type\": tileMeta?.type,\n      \"tileMeta.cost\": tileMeta?.cost,\n      \"player.money\": player?.money,\n      testRollMode,\n      testRollInput\n    });\n  }, [isMyTurn, movementDone, tileMeta, player, testRollMode, testRollInput]);\n\n  // Listen for purchase events\n  useEffect(() => {\n    socket.on('purchaseSuccess', ({ socketId, money, properties }) => {\n      console.log('[GameScreen] purchaseSuccess', { socketId, money, properties });\n      const updated = players.map(p =>\n        p.socketId === socketId ? { ...p, money, properties } : p\n      );\n      setPlayers(updated);\n      if (player.socketId === socketId) {\n        setPlayer({ ...player, money, properties });\n      }\n      setError(null);\n    });\n\n    // Add start bonus handler\n    socket.on('startBonus', ({ playerSocketId, newMoney, amount, reason }) => {\n      console.log('[GameScreen] startBonus', { playerSocketId, newMoney, amount, reason });\n      \n      // Update players' money\n      const updated = players.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      );\n      setPlayers(updated);\n\n      // Update current player's money if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({ ...player, money: newMoney });\n        setError(`You received $${amount} for ${reason} Start!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add playerMoved event handler\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      console.log('[GameScreen] playerMoved', { playerId, tileId });\n      if (playerId === player?.socketId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n      setPlayers(prev => \n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      // Clear any previous messages when a player moves\n      setError(null);\n    });\n\n    socket.on('purchaseFailed', ({ reason }) => {\n      console.log('[GameScreen] purchaseFailed', reason);\n      if (reason === 'insufficientFunds') {\n        setError(\"You don't have enough money.\");\n      } else if (reason === 'alreadyOwned') {\n        setError('You already own this property.');\n      } else {\n        setError('Cannot buy this property.');\n      }\n      // Clear error message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent payment handler\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney, amount, propertyName }) => {\n      console.log('[GameScreen] rentPaid', { payerSocketId, ownerSocketId, amount });\n      \n      // Update players' money\n      const updated = players.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      });\n      setPlayers(updated);\n\n      // Update current player's money if they were involved\n      if (player.socketId === payerSocketId) {\n        setPlayer({ ...player, money: payerMoney });\n        setError(`You paid $${amount} rent to ${players.find(p => p.socketId === ownerSocketId)?.name} for landing on ${propertyName}`);\n      } else if (player.socketId === ownerSocketId) {\n        setPlayer({ ...player, money: ownerMoney });\n        setError(`You received $${amount} rent from ${players.find(p => p.socketId === payerSocketId)?.name} for ${propertyName}`);\n      }\n      // Clear rent message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent bonus handler\n    socket.on('rentBonus', ({ playerSocketId, newMoney, amount, propertyName }) => {\n      console.log('[GameScreen] rentBonus', { playerSocketId, amount });\n      \n      // Update player's money\n      const updated = players.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      );\n      setPlayers(updated);\n\n      // Update current player if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({ ...player, money: newMoney });\n        setError(`You received $${amount} bonus for landing on your property ${propertyName}!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add casino result handler for other players\n    socket.on('casinoResult', ({ playerId, dice, amount, won, playerName, playerMoney }) => {\n      console.log('[GameScreen] casinoResult', { playerId, dice, amount, won, playerName, playerMoney });\n      \n      // Update player money in the game state\n      const updated = players.map(p =>\n        p.socketId === playerId ? { ...p, money: playerMoney } : p\n      );\n      setPlayers(updated);\n      \n      if (player.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, money: playerMoney }));\n      } else {\n        setError(`${playerName} ${won ? 'won' : 'lost'} $${amount} at the casino!`);\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    return () => {\n      socket.off('purchaseSuccess');\n      socket.off('purchaseFailed');\n      socket.off('rentPaid');\n      socket.off('playerMoved');\n      socket.off('rentBonus');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n    };\n  }, [socket, player, players, setPlayer, setPlayers]);\n\n  // Add state to track if we're currently in casino\n  const [inCasino, setInCasino] = useState(false);\n\n  // Update inCasino state when tile changes\n  useEffect(() => {\n    setInCasino(tileMeta?.id === 16);\n  }, [tileMeta]);\n\n  // Reset casino state when turn ends\n  useEffect(() => {\n    if (!isMyTurn) {\n      setInCasino(false);\n    }\n  }, [isMyTurn]);\n\n  const handleBuy = () => {\n    console.log('[GameScreen] handleBuy invoked');\n    setError(null);\n    socket.emit('buyProperty');\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        position: 'relative',\n        backgroundImage: `url(${bgImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        overflow: 'hidden'\n      }}\n    >\n      {/* Top bar with 4 quarters */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '240px',\n          display: 'flex',\n          zIndex: 100,\n          background: 'rgba(80, 80, 80, 0.61)',\n          boxShadow: '0 2px 8px rgba(0,0,0,0.2)'\n        }}\n      >\n        {/* 1st quarter: Dice board */}\n        <div\n          style={{\n            flex: 1,\n            position: 'relative',\n            height: '100%',\n            borderRight: '1px solid #333',\n            overflow: 'hidden'\n          }}\n        >\n          {isMyTurn && (\n            <>\n              <img\n                src={Dicebox}\n                alt=\"Dice Board\"\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'fill',\n                  pointerEvents: 'none'\n                }}\n              />\n              {testRollMode && (\n                <div style={{\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                  color: '#fff',\n                  padding: '8px 16px',\n                  borderRadius: '4px',\n                  zIndex: 100\n                }}>\n                  {testRollInput}\n                </div>\n              )}\n            </>\n          )}\n          <DiceRoller testRollMode={testRollMode} />\n        </div>\n\n        {/* 2nd quarter: Buy  */}\n        <div\n          style={{\n            flex: 1,\n            borderRight: '1px solid #333',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          {(() => {\n            // Check if any player owns this property\n            const isPropertyOwned = players.some(p => p.properties.includes(tileMeta?.id));\n            const show = isMyTurn && movementDone && tileMeta?.type === 'property' && !isPropertyOwned;\n            \n            console.log('[GameScreen] isMyTurn?', isMyTurn);\n            console.log('[GameScreen] movementDone?', movementDone);\n            console.log('[GameScreen] tileMeta)?', tileMeta);\n            console.log('[GameScreen] isPropertyOwned?', isPropertyOwned);\n            console.log('[GameScreen] render Buy?', show);\n            \n            return show ? (\n              <>\n                <button\n                  onClick={handleBuy}\n                  disabled={player.money < tileMeta.cost}\n                  style={{ padding: '8px 16px', margin: '4px' }}\n                >\n                  Buy (${tileMeta.cost})\n                </button>\n            \n                {error && (\n                  <p style={{ color: 'tomato', marginTop: '8px' }}>{error}</p>\n                )}\n              </>\n            ) : (\n              error && <p style={{ color: 'tomato', marginTop: '8px' }}>{error}</p>\n            );\n          })()}\n        </div>\n\n        {/* 3rd quarter: Casino or Teleport */}\n        <div style={{ \n          flex: 1, \n          borderRight: '1px solid #333', \n          height: '100%',\n          position: 'relative'\n        }}>\n          {(() => {\n            const isCornerChoice = isMyTurn && movementDone && tileMeta?.name?.toLowerCase().includes('choose corner');\n            \n            if (isCornerChoice) {\n              return (\n                <div style={{\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr',\n                  gridTemplateRows: '1fr 1fr',\n                  gap: '4px',\n                  width: '100%',\n                  height: '100%',\n                  padding: '4px'\n                }}>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 1, prevTile: 30 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Start</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 7, prevTile: 6 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Hotel</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 16, prevTile: 15 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Casino</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 22, prevTile: 21 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Road</span>\n                  </button>\n                </div>\n              );\n            } else if (inCasino) {\n              return <CasinoBetting \n                isMyTurn={isMyTurn} \n                currentMoney={player?.money || 0}\n                socket={socket}\n                player={player}\n              />;\n            }\n            return null;\n          })()}\n        </div>\n\n        {/* 4th quarter */}\n        <div style={{ flex: 1, height: '100%' }} />\n      </div>\n\n      {/* Main content (board & dashboards) */}\n      <div\n        style={{\n          marginTop: '240px',\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          position: 'relative'\n        }}\n      >\n        <div\n          style={{\n            minWidth: 220,\n            height: '80%',\n            marginRight: 48,\n            background: 'rgba(206, 206, 206, 0.96)',\n            borderRight: '2px solid #d3d3d3',\n            borderRadius: 12,\n            boxShadow: '0 0 12px 0 #eee',\n            padding: '16px 10px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'stretch'\n          }}\n        >\n          <h4 style={{ textAlign: 'center', margin: 0, marginBottom: 10 }}>\n            Other Players\n          </h4>\n          <PlayerStats />\n        </div>\n\n        <div style={{ position: 'relative', zIndex: 2 }}>\n          <Board />\n        </div>\n      </div>\n\n      {/* Bottom dashboard */}\n      <div\n        style={{\n          width: '100%',\n          background: 'rgba(80, 80, 80, 0.61)',\n          borderTop: '2px solid #bbb',\n          boxShadow: '0 -2px 10px #ececec',\n          padding: '0 0 18px 0',\n          zIndex: 10\n        }}\n      >\n        <Dashboard />\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}