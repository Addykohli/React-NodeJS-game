{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\components\\\\RPSTieResolver.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport cash500 from '../assets/cash500.png';\nimport cash1000 from '../assets/cash1000.png';\nimport cash5000 from '../assets/cash5000.png';\nimport cash10000 from '../assets/cash10000.png';\nimport cashBehind from '../assets/cashBehind.png';\n\n// Define cash amounts separately to ensure random order\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cashAmounts = [{\n  amount: 500,\n  image: cash500\n}, {\n  amount: 1000,\n  image: cash1000\n}, {\n  amount: 5000,\n  image: cash5000\n}, {\n  amount: 10000,\n  image: cash10000\n}];\nconst RPSTieResolver = ({\n  maxAmount,\n  gameId,\n  tiedPlayerId,\n  tiedPlayerName,\n  socket,\n  onResolved\n}) => {\n  _s();\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [revealedAmount, setRevealedAmount] = useState(null);\n  const [showAll, setShowAll] = useState(false);\n  const [isActive, setIsActive] = useState(true);\n  const [isExiting, setIsExiting] = useState(false);\n  const [hasEntered, setHasEntered] = useState(false);\n  const [availableAmounts] = useState(() => cashAmounts.filter(card => card.amount <= maxAmount).sort(() => Math.random() - 0.5));\n\n  // If maxAmount is less than 500, skip the animation and resolve immediately\n  useEffect(() => {\n    if (maxAmount < 500) {\n      console.log('[RPS] Skipping animation, maxAmount < 500');\n      socket.emit('stonePaperScissorsTieAmount', {\n        gameId,\n        amount: maxAmount,\n        tiedPlayerId\n      });\n      if (onResolved) onResolved();\n      return;\n    }\n    console.log('[RPS] RPSTieResolver mounted:', {\n      maxAmount,\n      gameId,\n      tiedPlayerId,\n      tiedPlayerName\n    });\n    setTimeout(() => {\n      setHasEntered(true);\n    }, 100);\n    return () => {\n      console.log('[RPS] RPSTieResolver unmounting');\n    };\n  }, [maxAmount, gameId, tiedPlayerId, tiedPlayerName, socket, onResolved]);\n  const handleCashClick = index => {\n    if (selectedIndex !== null) {\n      console.log('[RPS] Ignoring click, card already selected');\n      return;\n    }\n    console.log('[RPS] Card clicked:', {\n      index,\n      amount: availableAmounts[index].amount,\n      gameId,\n      tiedPlayerId\n    });\n    setSelectedIndex(index);\n    const amount = availableAmounts[index].amount;\n    setRevealedAmount(amount);\n\n    // First reveal selected card\n    setTimeout(() => {\n      console.log('[RPS] Revealing selected card');\n      // After 3 seconds, reveal all other cards\n      setShowAll(true);\n\n      // After another 3 seconds, send the amount and start exit animations\n      setTimeout(() => {\n        console.log('[RPS] Sending tie amount to server:', {\n          gameId,\n          amount,\n          tiedPlayerId\n        });\n        // Send the transaction amount before starting exit animation\n        socket.emit('stonePaperScissorsTieAmount', {\n          gameId,\n          amount,\n          tiedPlayerId\n        });\n\n        // Wait a bit to ensure server processes the transaction\n        setTimeout(() => {\n          console.log('[RPS] Starting exit animations');\n          setIsExiting(true);\n\n          // Finally remove from DOM after animations complete\n          setTimeout(() => {\n            console.log('[RPS] Cleanup and resolve');\n            setIsActive(false);\n            if (onResolved) onResolved();\n          }, 1000);\n        }, 500);\n      }, 3000);\n    }, 3000);\n  };\n\n  // If maxAmount is less than 500, don't render anything\n  if (maxAmount < 500 || !isActive) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: '20px',\n      zIndex: 1000\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: '#fff',\n        fontSize: '1.4em',\n        textAlign: 'center',\n        marginBottom: '10px',\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n        padding: '10px 20px',\n        borderRadius: '8px'\n      },\n      children: [\"Choose amount to take from \", tiedPlayerName, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        gap: '20px',\n        padding: '20px'\n      },\n      children: availableAmounts.map((card, index) => {\n        const isSelected = index === selectedIndex;\n\n        // Determine which image to show\n        let currentImage = cashBehind;\n        if (isSelected && selectedIndex !== null) {\n          // Show revealed amount for selected card immediately\n          currentImage = card.image;\n        } else if (showAll) {\n          // Show actual amounts for other cards after delay\n          currentImage = card.image;\n        }\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentImage,\n          alt: `Cash ${card.amount}`,\n          onClick: () => handleCashClick(index),\n          style: {\n            cursor: !selectedIndex ? 'pointer' : 'default',\n            width: '150px',\n            height: 'auto',\n            transform: `translateY(${hasEntered ? '0' : '-100vh'}) \n                           ${isExiting ? `translateY(${isSelected ? '100vh' : '-100vh'})` : ''}`,\n            transition: 'transform 1s ease',\n            position: 'relative'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(RPSTieResolver, \"M/2RXz6/pxvGQSqfOMMKVhWj76M=\");\n_c = RPSTieResolver;\nexport default RPSTieResolver;\nvar _c;\n$RefreshReg$(_c, \"RPSTieResolver\");","map":{"version":3,"names":["React","useState","useEffect","cash500","cash1000","cash5000","cash10000","cashBehind","jsxDEV","_jsxDEV","cashAmounts","amount","image","RPSTieResolver","maxAmount","gameId","tiedPlayerId","tiedPlayerName","socket","onResolved","_s","selectedIndex","setSelectedIndex","revealedAmount","setRevealedAmount","showAll","setShowAll","isActive","setIsActive","isExiting","setIsExiting","hasEntered","setHasEntered","availableAmounts","filter","card","sort","Math","random","console","log","emit","setTimeout","handleCashClick","index","style","position","top","left","transform","display","flexDirection","alignItems","gap","zIndex","children","color","fontSize","textAlign","marginBottom","backgroundColor","padding","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","map","isSelected","currentImage","src","alt","onClick","cursor","width","height","transition","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/components/RPSTieResolver.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport cash500 from '../assets/cash500.png';\r\nimport cash1000 from '../assets/cash1000.png';\r\nimport cash5000 from '../assets/cash5000.png';\r\nimport cash10000 from '../assets/cash10000.png';\r\nimport cashBehind from '../assets/cashBehind.png';\r\n\r\n// Define cash amounts separately to ensure random order\r\nconst cashAmounts = [\r\n  { amount: 500, image: cash500 },\r\n  { amount: 1000, image: cash1000 },\r\n  { amount: 5000, image: cash5000 },\r\n  { amount: 10000, image: cash10000 }\r\n];\r\n\r\nconst RPSTieResolver = ({ maxAmount, gameId, tiedPlayerId, tiedPlayerName, socket, onResolved }) => {\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [revealedAmount, setRevealedAmount] = useState(null);\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [isExiting, setIsExiting] = useState(false);\r\n  const [hasEntered, setHasEntered] = useState(false);\r\n  const [availableAmounts] = useState(() => \r\n    cashAmounts\r\n      .filter(card => card.amount <= maxAmount)\r\n      .sort(() => Math.random() - 0.5)\r\n  );\r\n\r\n  // If maxAmount is less than 500, skip the animation and resolve immediately\r\n  useEffect(() => {\r\n    if (maxAmount < 500) {\r\n      console.log('[RPS] Skipping animation, maxAmount < 500');\r\n      socket.emit('stonePaperScissorsTieAmount', { \r\n        gameId, \r\n        amount: maxAmount,\r\n        tiedPlayerId \r\n      });\r\n      if (onResolved) onResolved();\r\n      return;\r\n    }\r\n\r\n    console.log('[RPS] RPSTieResolver mounted:', { maxAmount, gameId, tiedPlayerId, tiedPlayerName });\r\n    setTimeout(() => {\r\n      setHasEntered(true);\r\n    }, 100);\r\n\r\n    return () => {\r\n      console.log('[RPS] RPSTieResolver unmounting');\r\n    };\r\n  }, [maxAmount, gameId, tiedPlayerId, tiedPlayerName, socket, onResolved]);\r\n\r\n  const handleCashClick = (index) => {\r\n    if (selectedIndex !== null) {\r\n      console.log('[RPS] Ignoring click, card already selected');\r\n      return;\r\n    }\r\n\r\n    console.log('[RPS] Card clicked:', {\r\n      index,\r\n      amount: availableAmounts[index].amount,\r\n      gameId,\r\n      tiedPlayerId\r\n    });\r\n\r\n    setSelectedIndex(index);\r\n    const amount = availableAmounts[index].amount;\r\n    setRevealedAmount(amount);\r\n\r\n    // First reveal selected card\r\n    setTimeout(() => {\r\n      console.log('[RPS] Revealing selected card');\r\n      // After 3 seconds, reveal all other cards\r\n      setShowAll(true);\r\n      \r\n      // After another 3 seconds, send the amount and start exit animations\r\n      setTimeout(() => {\r\n        console.log('[RPS] Sending tie amount to server:', {\r\n          gameId,\r\n          amount,\r\n          tiedPlayerId\r\n        });\r\n        // Send the transaction amount before starting exit animation\r\n        socket.emit('stonePaperScissorsTieAmount', { \r\n          gameId, \r\n          amount,\r\n          tiedPlayerId \r\n        });\r\n        \r\n        // Wait a bit to ensure server processes the transaction\r\n        setTimeout(() => {\r\n          console.log('[RPS] Starting exit animations');\r\n          setIsExiting(true);\r\n          \r\n          // Finally remove from DOM after animations complete\r\n          setTimeout(() => {\r\n            console.log('[RPS] Cleanup and resolve');\r\n            setIsActive(false);\r\n            if (onResolved) onResolved();\r\n          }, 1000);\r\n        }, 500);\r\n      }, 3000);\r\n    }, 3000);\r\n  };\r\n\r\n  // If maxAmount is less than 500, don't render anything\r\n  if (maxAmount < 500 || !isActive) return null;\r\n\r\n  return (\r\n    <div style={{\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      transform: 'translate(-50%, -50%)',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      gap: '20px',\r\n      zIndex: 1000\r\n    }}>\r\n      <div style={{\r\n        color: '#fff',\r\n        fontSize: '1.4em',\r\n        textAlign: 'center',\r\n        marginBottom: '10px',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n        padding: '10px 20px',\r\n        borderRadius: '8px'\r\n      }}>\r\n        Choose amount to take from {tiedPlayerName}:\r\n      </div>\r\n      <div style={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '20px',\r\n        padding: '20px'\r\n      }}>\r\n        {availableAmounts.map((card, index) => {\r\n          const isSelected = index === selectedIndex;\r\n          \r\n          // Determine which image to show\r\n          let currentImage = cashBehind;\r\n          if (isSelected && selectedIndex !== null) {\r\n            // Show revealed amount for selected card immediately\r\n            currentImage = card.image;\r\n          } else if (showAll) {\r\n            // Show actual amounts for other cards after delay\r\n            currentImage = card.image;\r\n          }\r\n\r\n          return (\r\n            <img\r\n              key={index}\r\n              src={currentImage}\r\n              alt={`Cash ${card.amount}`}\r\n              onClick={() => handleCashClick(index)}\r\n              style={{\r\n                cursor: !selectedIndex ? 'pointer' : 'default',\r\n                width: '150px',\r\n                height: 'auto',\r\n                transform: `translateY(${hasEntered ? '0' : '-100vh'}) \r\n                           ${isExiting ? `translateY(${isSelected ? '100vh' : '-100vh'})` : ''}`,\r\n                transition: 'transform 1s ease',\r\n                position: 'relative'\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RPSTieResolver; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}