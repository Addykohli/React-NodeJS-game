{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\components\\\\RPSTieResolver.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport cash500 from '../assets/cash500.png';\nimport cash1000 from '../assets/cash1000.png';\nimport cash5000 from '../assets/cash5000.png';\nimport cash10000 from '../assets/cash10000.png';\nimport cashBehind from '../assets/cashBehind.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cashAmounts = [{\n  amount: 500,\n  image: cash500\n}, {\n  amount: 1000,\n  image: cash1000\n}, {\n  amount: 5000,\n  image: cash5000\n}, {\n  amount: 10000,\n  image: cash10000\n}];\nconst RPSTieResolver = ({\n  maxAmount,\n  gameId,\n  socket,\n  onResolved\n}) => {\n  _s();\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [revealedAmount, setRevealedAmount] = useState(null);\n  const [showAll, setShowAll] = useState(false);\n  const [isActive, setIsActive] = useState(true);\n  const [isExiting, setIsExiting] = useState(false);\n  const [hasEntered, setHasEntered] = useState(false);\n  const [availableAmounts] = useState(() => cashAmounts.filter(card => card.amount <= maxAmount).sort(() => Math.random() - 0.5));\n  useEffect(() => {\n    console.log('[DEBUG] RPSTieResolver mounted with:', {\n      maxAmount,\n      gameId\n    });\n    setTimeout(() => {\n      setHasEntered(true);\n    }, 100);\n    return () => {\n      console.log('[DEBUG] RPSTieResolver unmounting');\n    };\n  }, [maxAmount, gameId]);\n  const handleCashClick = index => {\n    if (selectedIndex !== null) {\n      console.log('[DEBUG] Ignoring click, card already selected');\n      return;\n    }\n    console.log('[DEBUG] Card clicked:', {\n      index,\n      amount: availableAmounts[index].amount,\n      gameId\n    });\n    setSelectedIndex(index);\n    const amount = availableAmounts[index].amount;\n    setRevealedAmount(amount);\n\n    // First reveal selected card\n    setTimeout(() => {\n      console.log('[DEBUG] Revealing selected card');\n      // After 3 seconds, reveal all other cards\n      setShowAll(true);\n\n      // After another 3 seconds, send the amount and start exit animations\n      setTimeout(() => {\n        console.log('[DEBUG] Sending tie amount to server:', {\n          gameId,\n          amount\n        });\n        // Send the transaction amount before starting exit animation\n        socket.emit('stonePaperScissorsTieAmount', {\n          gameId,\n          amount\n        });\n\n        // Wait a bit to ensure server processes the transaction\n        setTimeout(() => {\n          console.log('[DEBUG] Starting exit animations');\n          setIsExiting(true);\n\n          // Finally remove from DOM after animations complete\n          setTimeout(() => {\n            console.log('[DEBUG] Cleanup and resolve');\n            setIsActive(false);\n            if (onResolved) onResolved();\n          }, 1000);\n        }, 500);\n      }, 3000);\n    }, 3000);\n  };\n  if (!isActive) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'flex',\n      flexDirection: 'row',\n      gap: '20px',\n      padding: '20px',\n      zIndex: 1000\n    },\n    children: availableAmounts.map((card, index) => {\n      const isSelected = index === selectedIndex;\n\n      // Determine which image to show\n      let currentImage = cashBehind;\n      if (isSelected && selectedIndex !== null) {\n        // Show revealed amount for selected card immediately\n        currentImage = card.image;\n      } else if (showAll) {\n        // Show actual amounts for other cards after delay\n        currentImage = card.image;\n      }\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentImage,\n        alt: `Cash ${card.amount}`,\n        onClick: () => handleCashClick(index),\n        style: {\n          cursor: !selectedIndex ? 'pointer' : 'default',\n          width: '150px',\n          // Fixed width to prevent size changes\n          height: 'auto',\n          transform: `translateY(${hasEntered ? '0' : '-100vh'}) \n                         ${isExiting ? `translateY(${isSelected ? '100vh' : '-100vh'})` : ''}`,\n          transition: 'transform 1s ease',\n          position: 'relative'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(RPSTieResolver, \"M/2RXz6/pxvGQSqfOMMKVhWj76M=\");\n_c = RPSTieResolver;\nexport default RPSTieResolver;\nvar _c;\n$RefreshReg$(_c, \"RPSTieResolver\");","map":{"version":3,"names":["React","useState","useEffect","cash500","cash1000","cash5000","cash10000","cashBehind","jsxDEV","_jsxDEV","cashAmounts","amount","image","RPSTieResolver","maxAmount","gameId","socket","onResolved","_s","selectedIndex","setSelectedIndex","revealedAmount","setRevealedAmount","showAll","setShowAll","isActive","setIsActive","isExiting","setIsExiting","hasEntered","setHasEntered","availableAmounts","filter","card","sort","Math","random","console","log","setTimeout","handleCashClick","index","emit","style","position","top","left","transform","display","flexDirection","gap","padding","zIndex","children","map","isSelected","currentImage","src","alt","onClick","cursor","width","height","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/components/RPSTieResolver.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport cash500 from '../assets/cash500.png';\r\nimport cash1000 from '../assets/cash1000.png';\r\nimport cash5000 from '../assets/cash5000.png';\r\nimport cash10000 from '../assets/cash10000.png';\r\nimport cashBehind from '../assets/cashBehind.png';\r\n\r\nconst cashAmounts = [\r\n  { amount: 500, image: cash500 },\r\n  { amount: 1000, image: cash1000 },\r\n  { amount: 5000, image: cash5000 },\r\n  { amount: 10000, image: cash10000 }\r\n];\r\n\r\nconst RPSTieResolver = ({ maxAmount, gameId, socket, onResolved }) => {\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [revealedAmount, setRevealedAmount] = useState(null);\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [isExiting, setIsExiting] = useState(false);\r\n  const [hasEntered, setHasEntered] = useState(false);\r\n  const [availableAmounts] = useState(() => \r\n    cashAmounts\r\n      .filter(card => card.amount <= maxAmount)\r\n      .sort(() => Math.random() - 0.5)\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log('[DEBUG] RPSTieResolver mounted with:', { maxAmount, gameId });\r\n    setTimeout(() => {\r\n      setHasEntered(true);\r\n    }, 100);\r\n\r\n    return () => {\r\n      console.log('[DEBUG] RPSTieResolver unmounting');\r\n    };\r\n  }, [maxAmount, gameId]);\r\n\r\n  const handleCashClick = (index) => {\r\n    if (selectedIndex !== null) {\r\n      console.log('[DEBUG] Ignoring click, card already selected');\r\n      return;\r\n    }\r\n\r\n    console.log('[DEBUG] Card clicked:', {\r\n      index,\r\n      amount: availableAmounts[index].amount,\r\n      gameId\r\n    });\r\n\r\n    setSelectedIndex(index);\r\n    const amount = availableAmounts[index].amount;\r\n    setRevealedAmount(amount);\r\n\r\n    // First reveal selected card\r\n    setTimeout(() => {\r\n      console.log('[DEBUG] Revealing selected card');\r\n      // After 3 seconds, reveal all other cards\r\n      setShowAll(true);\r\n      \r\n      // After another 3 seconds, send the amount and start exit animations\r\n      setTimeout(() => {\r\n        console.log('[DEBUG] Sending tie amount to server:', {\r\n          gameId,\r\n          amount\r\n        });\r\n        // Send the transaction amount before starting exit animation\r\n        socket.emit('stonePaperScissorsTieAmount', { gameId, amount });\r\n        \r\n        // Wait a bit to ensure server processes the transaction\r\n        setTimeout(() => {\r\n          console.log('[DEBUG] Starting exit animations');\r\n          setIsExiting(true);\r\n          \r\n          // Finally remove from DOM after animations complete\r\n          setTimeout(() => {\r\n            console.log('[DEBUG] Cleanup and resolve');\r\n            setIsActive(false);\r\n            if (onResolved) onResolved();\r\n          }, 1000);\r\n        }, 500);\r\n      }, 3000);\r\n    }, 3000);\r\n  };\r\n\r\n  if (!isActive) return null;\r\n\r\n  return (\r\n    <div style={{\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      transform: 'translate(-50%, -50%)',\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      gap: '20px',\r\n      padding: '20px',\r\n      zIndex: 1000\r\n    }}>\r\n      {availableAmounts.map((card, index) => {\r\n        const isSelected = index === selectedIndex;\r\n        \r\n        // Determine which image to show\r\n        let currentImage = cashBehind;\r\n        if (isSelected && selectedIndex !== null) {\r\n          // Show revealed amount for selected card immediately\r\n          currentImage = card.image;\r\n        } else if (showAll) {\r\n          // Show actual amounts for other cards after delay\r\n          currentImage = card.image;\r\n        }\r\n\r\n        return (\r\n          <img\r\n            key={index}\r\n            src={currentImage}\r\n            alt={`Cash ${card.amount}`}\r\n            onClick={() => handleCashClick(index)}\r\n            style={{\r\n              cursor: !selectedIndex ? 'pointer' : 'default',\r\n              width: '150px', // Fixed width to prevent size changes\r\n              height: 'auto',\r\n              transform: `translateY(${hasEntered ? '0' : '-100vh'}) \r\n                         ${isExiting ? `translateY(${isSelected ? '100vh' : '-100vh'})` : ''}`,\r\n              transition: 'transform 1s ease',\r\n              position: 'relative'\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RPSTieResolver; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}