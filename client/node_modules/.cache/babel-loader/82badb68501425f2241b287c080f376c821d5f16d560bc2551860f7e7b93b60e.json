{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n  useEffect(() => {\n    // Determine the socket URL based on environment\n    const socketUrl = process.env.NODE_ENV === 'production' ? 'https://react-nodejs-game.onrender.com' : 'http://localhost:5000';\n    console.log('[GameContext] Initializing socket connection to:', socketUrl);\n\n    // Initialize socket connection\n    const newSocket = io(socketUrl, {\n      withCredentials: true,\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Add connection event handlers\n    newSocket.on('connect', () => {\n      console.log('[GameContext] Socket connected successfully');\n    });\n    newSocket.on('connect_error', error => {\n      console.error('[GameContext] Socket connection error:', error);\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('[GameContext] Socket disconnected:', reason);\n    });\n    setSocket(newSocket);\n\n    // Socket event listeners\n    newSocket.on('gameStart', ({\n      players,\n      currentPlayerId\n    }) => {\n      setPlayers(players);\n      setCurrentPlayerId(currentPlayerId);\n      const currentPlayer = players.find(p => p.socketId === newSocket.id);\n      setPlayer(currentPlayer);\n    });\n    newSocket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setMovementDone(false);\n    });\n    newSocket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      console.log('[GameContext] Cleaning up socket connection');\n      if (newSocket) {\n        newSocket.removeAllListeners();\n        newSocket.close();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      socket,\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone,\n      insufficientFunds,\n      setInsufficientFunds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"/Bk120mhxQM8IDnla8HOxjm7kl0=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","socket","setSocket","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","gameState","setGameState","diceRoll","setDiceRoll","movementDone","setMovementDone","insufficientFunds","setInsufficientFunds","socketUrl","process","env","NODE_ENV","console","log","newSocket","withCredentials","transports","reconnection","reconnectionAttempts","reconnectionDelay","on","error","reason","currentPlayer","find","p","socketId","id","nextPlayerId","removeAllListeners","close","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nexport const GameContext = createContext();\n\nexport const GameProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  useEffect(() => {\n    // Determine the socket URL based on environment\n    const socketUrl = process.env.NODE_ENV === 'production'\n      ? 'https://react-nodejs-game.onrender.com'\n      : 'http://localhost:5000';\n\n    console.log('[GameContext] Initializing socket connection to:', socketUrl);\n\n    // Initialize socket connection\n    const newSocket = io(socketUrl, {\n      withCredentials: true,\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Add connection event handlers\n    newSocket.on('connect', () => {\n      console.log('[GameContext] Socket connected successfully');\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('[GameContext] Socket connection error:', error);\n    });\n\n    newSocket.on('disconnect', (reason) => {\n      console.log('[GameContext] Socket disconnected:', reason);\n    });\n\n    setSocket(newSocket);\n\n    // Socket event listeners\n    newSocket.on('gameStart', ({ players, currentPlayerId }) => {\n      setPlayers(players);\n      setCurrentPlayerId(currentPlayerId);\n      const currentPlayer = players.find(p => p.socketId === newSocket.id);\n      setPlayer(currentPlayer);\n    });\n\n    newSocket.on('turnEnded', ({ nextPlayerId }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setMovementDone(false);\n    });\n\n    newSocket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      console.log('[GameContext] Cleaning up socket connection');\n      if (newSocket) {\n        newSocket.removeAllListeners();\n        newSocket.close();\n      }\n    };\n  }, []);\n\n  return (\n    <GameContext.Provider value={{\n      socket,\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone,\n      insufficientFunds,\n      setInsufficientFunds\n    }}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}