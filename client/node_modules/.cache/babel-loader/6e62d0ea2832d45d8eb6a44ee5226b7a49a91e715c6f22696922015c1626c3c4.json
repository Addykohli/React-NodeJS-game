{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/GameController.js\nimport { useContext, useEffect } from 'react';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\nconst GameController = () => {\n  _s();\n  const {\n    players,\n    setPlayers,\n    currentPlayerIndex,\n    diceRoll,\n    setDiceRoll,\n    setIsMoving\n  } = useContext(GameContext);\n  useEffect(() => {\n    if (!diceRoll) return; // nothing to do until a roll happens\n\n    const movePlayer = async () => {\n      const total = diceRoll[0] + diceRoll[1];\n      let remaining = total;\n      console.log(`[GameController] Starting move: ${total} steps for ${players[currentPlayerIndex].name}`);\n      setIsMoving(true);\n\n      // shallow copy so we can mutate\n      const updatedPlayers = [...players];\n      const player = updatedPlayers[currentPlayerIndex];\n      while (remaining > 0) {\n        const currentTile = tiles.find(t => t.id === (player.tileId || 1));\n        const prev = player.prevTile;\n        const rollType = total === 7 ? 'any' : total < 7 ? 'below' : 'above';\n        const candidates = (currentTile.next || []).filter(n => (n.from === prev || n.from == null) && (rollType === 'any' || n.roll === rollType || n.roll === 'any'));\n        let nextId;\n        if (total === 7 && candidates.length > 1) {\n          const names = candidates.map(c => {\n            var _tiles$find;\n            return ((_tiles$find = tiles.find(t => t.id === c.to)) === null || _tiles$find === void 0 ? void 0 : _tiles$find.name) || `${c.to}`;\n          });\n          console.log(`[GameController] Branch on 7: options = ${names.join(', ')}`);\n          const pickFirst = window.confirm(`Choose path:\\nOK → ${names[0]}\\nCancel → ${names[1]}`);\n          nextId = pickFirst ? candidates[0].to : candidates[1].to;\n        } else {\n          var _candidates$;\n          nextId = (_candidates$ = candidates[0]) === null || _candidates$ === void 0 ? void 0 : _candidates$.to;\n        }\n        if (!nextId) {\n          console.warn(`[GameController] No valid path from tile ${currentTile.id}`);\n          break;\n        }\n        player.prevTile = player.tileId;\n        player.tileId = nextId;\n        setPlayers([...updatedPlayers]);\n        remaining -= 1;\n        console.log(`[GameController] Moved to tile ${nextId}, ${remaining} steps left`);\n\n        // pause for animation\n        // eslint-disable-next-line no-await-in-loop\n        await new Promise(res => setTimeout(res, 500));\n      }\n      console.log(`[GameController] Move complete for ${player.name}`);\n      setIsMoving(false);\n      setDiceRoll(null); // clear dice so next player can roll\n    };\n    movePlayer();\n  }, [diceRoll, players, currentPlayerIndex, setPlayers, setIsMoving, setDiceRoll]);\n  return null;\n};\n_s(GameController, \"C4VLXWiHhZ9XqbOjtXX47Qexpdo=\");\n_c = GameController;\nexport default GameController;\nvar _c;\n$RefreshReg$(_c, \"GameController\");","map":{"version":3,"names":["useContext","useEffect","GameContext","tiles","GameController","_s","players","setPlayers","currentPlayerIndex","diceRoll","setDiceRoll","setIsMoving","movePlayer","total","remaining","console","log","name","updatedPlayers","player","currentTile","find","t","id","tileId","prev","prevTile","rollType","candidates","next","filter","n","from","roll","nextId","length","names","map","c","_tiles$find","to","join","pickFirst","window","confirm","_candidates$","warn","Promise","res","setTimeout","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web/client/src/components/GameController.js"],"sourcesContent":["// src/components/GameController.js\r\nimport { useContext, useEffect } from 'react';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { tiles } from '../data/tiles';\r\n\r\nconst GameController = () => {\r\n  const {\r\n    players,\r\n    setPlayers,\r\n    currentPlayerIndex,\r\n    diceRoll,\r\n    setDiceRoll,\r\n    setIsMoving,\r\n  } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (!diceRoll) return;  // nothing to do until a roll happens\r\n\r\n    const movePlayer = async () => {\r\n      const total = diceRoll[0] + diceRoll[1];\r\n      let remaining = total;\r\n\r\n      console.log(\r\n        `[GameController] Starting move: ${total} steps for ${\r\n          players[currentPlayerIndex].name\r\n        }`\r\n      );\r\n      setIsMoving(true);\r\n\r\n      // shallow copy so we can mutate\r\n      const updatedPlayers = [...players];\r\n      const player = updatedPlayers[currentPlayerIndex];\r\n\r\n      while (remaining > 0) {\r\n        const currentTile = tiles.find((t) => t.id === (player.tileId || 1));\r\n        const prev = player.prevTile;\r\n        const rollType =\r\n          total === 7 ? 'any' : total < 7 ? 'below' : 'above';\r\n\r\n        const candidates = (currentTile.next || []).filter(\r\n          (n) =>\r\n            (n.from === prev || n.from == null) &&\r\n            (rollType === 'any' || n.roll === rollType || n.roll === 'any')\r\n        );\r\n\r\n        let nextId;\r\n        if (total === 7 && candidates.length > 1) {\r\n          const names = candidates.map(\r\n            (c) => tiles.find((t) => t.id === c.to)?.name || `${c.to}`\r\n          );\r\n          console.log(\r\n            `[GameController] Branch on 7: options = ${names.join(', ')}`\r\n          );\r\n          const pickFirst = window.confirm(\r\n            `Choose path:\\nOK → ${names[0]}\\nCancel → ${names[1]}`\r\n          );\r\n          nextId = pickFirst ? candidates[0].to : candidates[1].to;\r\n        } else {\r\n          nextId = candidates[0]?.to;\r\n        }\r\n\r\n        if (!nextId) {\r\n          console.warn(\r\n            `[GameController] No valid path from tile ${currentTile.id}`\r\n          );\r\n          break;\r\n        }\r\n\r\n        player.prevTile = player.tileId;\r\n        player.tileId = nextId;\r\n        setPlayers([...updatedPlayers]);\r\n\r\n        remaining -= 1;\r\n        console.log(\r\n          `[GameController] Moved to tile ${nextId}, ${remaining} steps left`\r\n        );\r\n\r\n        // pause for animation\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await new Promise((res) => setTimeout(res, 500));\r\n      }\r\n\r\n      console.log(\r\n        `[GameController] Move complete for ${player.name}`\r\n      );\r\n      setIsMoving(false);\r\n      setDiceRoll(null); // clear dice so next player can roll\r\n    };\r\n\r\n    movePlayer();\r\n  }, [\r\n    diceRoll,\r\n    players,\r\n    currentPlayerIndex,\r\n    setPlayers,\r\n    setIsMoving,\r\n    setDiceRoll,\r\n  ]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default GameController;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}