{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/GameController.js\nimport { useContext, useEffect } from 'react';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\nconst GameController = () => {\n  _s();\n  const {\n    players,\n    setPlayers,\n    currentPlayerIndex,\n    diceRoll,\n    setDiceRoll,\n    setIsMoving\n  } = useContext(GameContext);\n  useEffect(() => {\n    if (!diceRoll) return; // wait for a roll\n\n    const total = diceRoll[0] + diceRoll[1];\n    let remaining = total;\n    console.log(`[GameController] Starting move: ${total} steps for ${players[currentPlayerIndex].name}`);\n    const performMove = async () => {\n      const updated = [...players];\n      const player = updated[currentPlayerIndex];\n      while (remaining > 0) {\n        const currentTile = tiles.find(t => t.id === (player.tileId || 1));\n        const prev = player.prevTile;\n        const rollType = total === 7 ? 'any' : total < 7 ? 'below' : 'above';\n        const candidates = (currentTile.next || []).filter(n =>\n        // allow when coming from undefined OR matching from OR when from=null\n        (n.from === prev || n.from == null || typeof prev === 'undefined') && (rollType === 'any' || n.roll === rollType || n.roll === 'any'));\n        let nextId;\n        if (total === 7 && candidates.length > 1) {\n          const names = candidates.map(c => {\n            var _tiles$find;\n            return ((_tiles$find = tiles.find(t => t.id === c.to)) === null || _tiles$find === void 0 ? void 0 : _tiles$find.name) || c.to;\n          }).join(', ');\n          console.log(`[GameController] Branch options on 7: ${names}`);\n          const chooseFirst = window.confirm(`Choose path:\\nOK → ${names.split(', ')[0]}\\nCancel → ${names.split(', ')[1]}`);\n          nextId = chooseFirst ? candidates[0].to : candidates[1].to;\n        } else {\n          var _candidates$;\n          nextId = (_candidates$ = candidates[0]) === null || _candidates$ === void 0 ? void 0 : _candidates$.to;\n        }\n        if (!nextId) {\n          console.warn(`[GameController] No valid path from tile ${currentTile.id}`);\n          break;\n        }\n        player.prevTile = player.tileId;\n        player.tileId = nextId;\n        setPlayers([...updated]);\n        remaining -= 1;\n        console.log(`[GameController] Moved to tile ${nextId}, ${remaining} steps left`);\n\n        // pause for animation\n        // eslint-disable-next-line no-await-in-loop\n        await new Promise(res => setTimeout(res, 500));\n      }\n      console.log(`[GameController] Move complete for ${players[currentPlayerIndex].name}`);\n      setIsMoving(false);\n      setDiceRoll(null); // clear dice, allow next player to roll\n    };\n    performMove();\n  }, [diceRoll, players, currentPlayerIndex, setPlayers, setIsMoving, setDiceRoll]);\n  return null;\n};\n_s(GameController, \"C4VLXWiHhZ9XqbOjtXX47Qexpdo=\");\n_c = GameController;\nexport default GameController;\nvar _c;\n$RefreshReg$(_c, \"GameController\");","map":{"version":3,"names":["useContext","useEffect","GameContext","tiles","GameController","_s","players","setPlayers","currentPlayerIndex","diceRoll","setDiceRoll","setIsMoving","total","remaining","console","log","name","performMove","updated","player","currentTile","find","t","id","tileId","prev","prevTile","rollType","candidates","next","filter","n","from","roll","nextId","length","names","map","c","_tiles$find","to","join","chooseFirst","window","confirm","split","_candidates$","warn","Promise","res","setTimeout","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web/client/src/components/GameController.js"],"sourcesContent":["// src/components/GameController.js\r\nimport { useContext, useEffect } from 'react';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { tiles } from '../data/tiles';\r\n\r\nconst GameController = () => {\r\n  const {\r\n    players,\r\n    setPlayers,\r\n    currentPlayerIndex,\r\n    diceRoll,\r\n    setDiceRoll,\r\n    setIsMoving,\r\n  } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (!diceRoll) return; // wait for a roll\r\n\r\n    const total = diceRoll[0] + diceRoll[1];\r\n    let remaining = total;\r\n\r\n    console.log(\r\n      `[GameController] Starting move: ${total} steps for ${\r\n        players[currentPlayerIndex].name\r\n      }`\r\n    );\r\n\r\n    const performMove = async () => {\r\n      const updated = [...players];\r\n      const player = updated[currentPlayerIndex];\r\n\r\n      while (remaining > 0) {\r\n        const currentTile = tiles.find((t) => t.id === (player.tileId || 1));\r\n        const prev = player.prevTile;\r\n        const rollType =\r\n          total === 7 ? 'any' : total < 7 ? 'below' : 'above';\r\n\r\n        const candidates = (currentTile.next || []).filter(\r\n          (n) =>\r\n            // allow when coming from undefined OR matching from OR when from=null\r\n            (n.from === prev || n.from == null || typeof prev === 'undefined') &&\r\n            (rollType === 'any' || n.roll === rollType || n.roll === 'any')\r\n        );\r\n\r\n        let nextId;\r\n        if (total === 7 && candidates.length > 1) {\r\n          const names = candidates\r\n            .map((c) => tiles.find((t) => t.id === c.to)?.name || c.to)\r\n            .join(', ');\r\n          console.log(`[GameController] Branch options on 7: ${names}`);\r\n          const chooseFirst = window.confirm(\r\n            `Choose path:\\nOK → ${names.split(', ')[0]}\\nCancel → ${names.split(', ')[1]}`\r\n          );\r\n          nextId = chooseFirst ? candidates[0].to : candidates[1].to;\r\n        } else {\r\n          nextId = candidates[0]?.to;\r\n        }\r\n\r\n        if (!nextId) {\r\n          console.warn(\r\n            `[GameController] No valid path from tile ${currentTile.id}`\r\n          );\r\n          break;\r\n        }\r\n\r\n        player.prevTile = player.tileId;\r\n        player.tileId = nextId;\r\n        setPlayers([...updated]);\r\n\r\n        remaining -= 1;\r\n        console.log(\r\n          `[GameController] Moved to tile ${nextId}, ${remaining} steps left`\r\n        );\r\n\r\n        // pause for animation\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await new Promise((res) => setTimeout(res, 500));\r\n      }\r\n\r\n      console.log(\r\n        `[GameController] Move complete for ${players[currentPlayerIndex].name}`\r\n      );\r\n      setIsMoving(false);\r\n      setDiceRoll(null); // clear dice, allow next player to roll\r\n    };\r\n\r\n    performMove();\r\n  }, [\r\n    diceRoll,\r\n    players,\r\n    currentPlayerIndex,\r\n    setPlayers,\r\n    setIsMoving,\r\n    setDiceRoll,\r\n  ]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default GameController;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}