{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\components\\\\GameScreen.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport bgImage from '../assets/bg.png';\nimport Dicebox from '../assets/diceBoard.png';\nimport startIcon from '../assets/start.png';\nimport hotelIcon from '../assets/hotel.png';\nimport casinoIcon from '../assets/casino.png';\nimport roadIcon from '../assets/road.png';\nimport Board from './Board';\nimport DiceRoller from './DiceRoller';\nimport Dashboard from './Dashboard';\nimport PlayerStats from './PlayerStats';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CasinoBetting = ({\n  isMyTurn,\n  currentMoney,\n  socket,\n  player,\n  onCasinoPlayed\n}) => {\n  _s();\n  const [betAmount, setBetAmount] = useState(1000);\n  const [selectedBet, setSelectedBet] = useState(null);\n  const [showResult, setShowResult] = useState(null);\n  const [diceResult, setDiceResult] = useState(null);\n  const [isActive, setIsActive] = useState(true);\n  const handleAmountChange = delta => {\n    const newAmount = Math.max(1000, Math.min(currentMoney, betAmount + delta));\n    setBetAmount(newAmount);\n  };\n  const handleBetSelect = bet => {\n    setSelectedBet(bet);\n  };\n  const handleRoll = () => {\n    if (selectedBet && betAmount >= 1000 && betAmount <= currentMoney) {\n      socket.emit('casinoRoll', {\n        betAmount,\n        betType: selectedBet\n      });\n    }\n  };\n  useEffect(() => {\n    const handleCasinoResult = ({\n      playerId,\n      dice,\n      amount,\n      won,\n      playerMoney\n    }) => {\n      if (playerId === player.socketId) {\n        setDiceResult(dice);\n        setShowResult({\n          won,\n          amount\n        });\n        setIsActive(false);\n        onCasinoPlayed();\n      }\n    };\n    socket.on('casinoResult', handleCasinoResult);\n    return () => socket.off('casinoResult', handleCasinoResult);\n  }, [socket, player.socketId, onCasinoPlayed]);\n\n  // If not active (after result), show nothing\n  if (!isActive) {\n    if (showResult && diceResult) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px',\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/dice/dice${diceResult[0]}.png`,\n            alt: `Die ${diceResult[0]}`,\n            width: 125,\n            height: 125\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/dice/dice${diceResult[1]}.png`,\n            alt: `Die ${diceResult[1]}`,\n            width: 125,\n            height: 125\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: showResult.won ? '#4CAF50' : '#f44336',\n            fontWeight: 'bold',\n            fontSize: '1.2em'\n          },\n          children: showResult.won ? `You won $${showResult.amount}!` : `You lost $${showResult.amount}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      gap: '15px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAmountChange(-1000),\n        disabled: !isMyTurn || betAmount <= 1000,\n        style: {\n          padding: '8px 12px',\n          fontSize: '1.2em',\n          cursor: isMyTurn ? 'pointer' : 'not-allowed'\n        },\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 16px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          minWidth: '100px',\n          textAlign: 'center'\n        },\n        children: [\"$\", betAmount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAmountChange(1000),\n        disabled: !isMyTurn || betAmount >= currentMoney,\n        style: {\n          padding: '8px 12px',\n          fontSize: '1.2em',\n          cursor: isMyTurn ? 'pointer' : 'not-allowed'\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '10px'\n      },\n      children: ['above', '7', 'below'].map(bet => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBetSelect(bet),\n        disabled: !isMyTurn,\n        style: {\n          padding: '8px 16px',\n          backgroundColor: selectedBet === bet ? '#4CAF50' : '#fff',\n          color: selectedBet === bet ? '#fff' : '#000',\n          border: '1px solid #666',\n          borderRadius: '4px',\n          cursor: isMyTurn ? 'pointer' : 'not-allowed',\n          textTransform: 'capitalize'\n        },\n        children: bet\n      }, bet, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRoll,\n      disabled: !isMyTurn || !selectedBet || betAmount < 1000 || betAmount > currentMoney,\n      style: {\n        padding: '8px 24px',\n        backgroundColor: '#2196F3',\n        color: '#fff',\n        border: 'none',\n        borderRadius: '4px',\n        marginTop: '10px',\n        cursor: isMyTurn && selectedBet ? 'pointer' : 'not-allowed',\n        opacity: isMyTurn && selectedBet ? 1 : 0.7\n      },\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(CasinoBetting, \"1erwuWbl18mQT2wIK6glrgWb/ks=\");\n_c = CasinoBetting;\nexport default function GameScreen() {\n  _s2();\n  const {\n    player,\n    players,\n    setPlayer,\n    setPlayers,\n    currentPlayerId,\n    socket,\n    movementDone\n  } = useContext(GameContext);\n  const isMyTurn = (player === null || player === void 0 ? void 0 : player.socketId) === currentPlayerId;\n  const [error, setError] = useState(null);\n  const [testRollInput, setTestRollInput] = useState('');\n  const [testRollMode, setTestRollMode] = useState(false);\n  const [inCasino, setInCasino] = useState(false);\n  const [hasCasinoPlayed, setHasCasinoPlayed] = useState(false);\n\n  // Determine metadata for the current tile\n  const tileMeta = tiles.find(t => t.id === (player === null || player === void 0 ? void 0 : player.tileId));\n\n  // Add keyboard listener for test rolls\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (!isMyTurn) return;\n\n      // Build up the test roll input\n      if (e.key === 'Enter' && testRollInput.startsWith('testroll')) {\n        const rollNumber = parseInt(testRollInput.slice(8));\n        if (!isNaN(rollNumber) && rollNumber >= 2 && rollNumber <= 12) {\n          socket.emit('rollDice', {\n            testRoll: rollNumber\n          });\n          setTestRollInput('');\n          setTestRollMode(false);\n        }\n      } else if (e.key === 'Backspace') {\n        setTestRollInput(prev => prev.slice(0, -1));\n      } else if (e.key.length === 1) {\n        // Regular character\n        setTestRollInput(prev => prev + e.key);\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isMyTurn, testRollInput, socket]);\n\n  // Show current test roll input if active\n  useEffect(() => {\n    if (testRollInput.startsWith('testroll')) {\n      setTestRollMode(true);\n    } else if (testRollInput.length === 0) {\n      setTestRollMode(false);\n    }\n  }, [testRollInput]);\n\n  // Debug logging to trace condition\n  useEffect(() => {\n    console.log('[GameScreen] Debug:', {\n      isMyTurn,\n      movementDone,\n      tileMeta,\n      \"player.tileId\": player === null || player === void 0 ? void 0 : player.tileId,\n      \"tileMeta.type\": tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.type,\n      \"tileMeta.cost\": tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.cost,\n      \"player.money\": player === null || player === void 0 ? void 0 : player.money,\n      testRollMode,\n      testRollInput\n    });\n  }, [isMyTurn, movementDone, tileMeta, player, testRollMode, testRollInput]);\n\n  // Listen for purchase events\n  useEffect(() => {\n    socket.on('purchaseSuccess', ({\n      socketId,\n      money,\n      properties\n    }) => {\n      console.log('[GameScreen] purchaseSuccess', {\n        socketId,\n        money,\n        properties\n      });\n      const updated = players.map(p => p.socketId === socketId ? {\n        ...p,\n        money,\n        properties\n      } : p);\n      setPlayers(updated);\n      if (player.socketId === socketId) {\n        setPlayer({\n          ...player,\n          money,\n          properties\n        });\n      }\n      setError(null);\n    });\n\n    // Add start bonus handler\n    socket.on('startBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      reason\n    }) => {\n      console.log('[GameScreen] startBonus', {\n        playerSocketId,\n        newMoney,\n        amount,\n        reason\n      });\n\n      // Update players' money\n      const updated = players.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p);\n      setPlayers(updated);\n\n      // Update current player's money if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({\n          ...player,\n          money: newMoney\n        });\n        setError(`You received $${amount} for ${reason} Start!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add playerMoved event handler\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      console.log('[GameScreen] playerMoved', {\n        playerId,\n        tileId\n      });\n      if (playerId === (player === null || player === void 0 ? void 0 : player.socketId)) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n      // Clear any previous messages when a player moves\n      setError(null);\n    });\n    socket.on('purchaseFailed', ({\n      reason\n    }) => {\n      console.log('[GameScreen] purchaseFailed', reason);\n      if (reason === 'insufficientFunds') {\n        setError(\"You don't have enough money.\");\n      } else if (reason === 'alreadyOwned') {\n        setError('You already own this property.');\n      } else {\n        setError('Cannot buy this property.');\n      }\n      // Clear error message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent payment handler\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameScreen] rentPaid', {\n        payerSocketId,\n        ownerSocketId,\n        amount\n      });\n\n      // Update players' money\n      const updated = players.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      });\n      setPlayers(updated);\n\n      // Update current player's money if they were involved\n      if (player.socketId === payerSocketId) {\n        var _players$find;\n        setPlayer({\n          ...player,\n          money: payerMoney\n        });\n        setError(`You paid $${amount} rent to ${(_players$find = players.find(p => p.socketId === ownerSocketId)) === null || _players$find === void 0 ? void 0 : _players$find.name} for landing on ${propertyName}`);\n      } else if (player.socketId === ownerSocketId) {\n        var _players$find2;\n        setPlayer({\n          ...player,\n          money: ownerMoney\n        });\n        setError(`You received $${amount} rent from ${(_players$find2 = players.find(p => p.socketId === payerSocketId)) === null || _players$find2 === void 0 ? void 0 : _players$find2.name} for ${propertyName}`);\n      }\n      // Clear rent message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent bonus handler\n    socket.on('rentBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameScreen] rentBonus', {\n        playerSocketId,\n        amount\n      });\n\n      // Update player's money\n      const updated = players.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p);\n      setPlayers(updated);\n\n      // Update current player if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({\n          ...player,\n          money: newMoney\n        });\n        setError(`You received $${amount} bonus for landing on your property ${propertyName}!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add casino result handler for other players\n    socket.on('casinoResult', ({\n      playerId,\n      dice,\n      amount,\n      won,\n      playerName,\n      playerMoney\n    }) => {\n      console.log('[GameScreen] casinoResult', {\n        playerId,\n        dice,\n        amount,\n        won,\n        playerName,\n        playerMoney\n      });\n\n      // Update player money in the game state\n      const updated = players.map(p => p.socketId === playerId ? {\n        ...p,\n        money: playerMoney\n      } : p);\n      setPlayers(updated);\n      if (player.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: playerMoney\n        }));\n      } else {\n        setError(`${playerName} ${won ? 'won' : 'lost'} $${amount} at the casino!`);\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n    return () => {\n      socket.off('purchaseSuccess');\n      socket.off('purchaseFailed');\n      socket.off('rentPaid');\n      socket.off('playerMoved');\n      socket.off('rentBonus');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n    };\n  }, [socket, player, players, setPlayer, setPlayers]);\n\n  // Update inCasino state when tile changes\n  useEffect(() => {\n    const isCasinoTile = (tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.id) === 16;\n    setInCasino(isCasinoTile);\n    if (isCasinoTile) {\n      setHasCasinoPlayed(false);\n    }\n  }, [tileMeta]);\n\n  // Reset casino states when turn ends\n  useEffect(() => {\n    if (!isMyTurn) {\n      setInCasino(false);\n      setHasCasinoPlayed(false);\n    }\n  }, [isMyTurn]);\n  const handleBuy = () => {\n    console.log('[GameScreen] handleBuy invoked');\n    setError(null);\n    socket.emit('buyProperty');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      minWidth: '1200px',\n      position: 'relative',\n      backgroundImage: `url(${bgImage})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      overflow: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative',\n        minWidth: '1080px',\n        padding: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '100%',\n          height: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PlayerStats, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '80%',\n        minWidth: '1000px',\n        height: '240px',\n        minHeight: '380px',\n        background: 'rgba(80, 80, 80, 0.9)',\n        borderTop: '2px solid #bbb',\n        boxShadow: '0 -2px 10px rgba(0, 0, 0, 0.2)',\n        zIndex: 100,\n        display: 'flex',\n        border: '2px solid #666',\n        borderRadius: '30px 30px 0 0',\n        margin: '0 auto 0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          position: 'relative',\n          borderRight: '2px solid #666',\n          padding: '10px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: 'rgba(60, 60, 60, 0.3)',\n          borderRadius: '30px 30px 30px 30px',\n          overflow: 'hidden'\n        },\n        children: [isMyTurn && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: Dicebox,\n            alt: \"Dice Board\",\n            style: {\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              objectFit: 'fill',\n              objectPosition: 'center',\n              pointerEvents: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this), testRollMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              color: '#fff',\n              padding: '8px 16px',\n              borderRadius: '4px',\n              zIndex: 100\n            },\n            children: testRollInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(DiceRoller, {\n          testRollMode: testRollMode,\n          hasCasinoPlayed: hasCasinoPlayed,\n          style: {\n            position: 'relative',\n            zIndex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          borderRight: '2px solid #666',\n          padding: '10px',\n          display: 'flex',\n          flexDirection: 'column',\n          background: 'rgba(60, 60, 60, 0.3)'\n        },\n        children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          padding: '10px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: 'rgba(60, 60, 60, 0.3)',\n          borderRadius: '0 10px 0 0'\n        },\n        children: (_tileMeta$name => {\n          // Show \"Your Turn\" for current player before landing\n          if (isMyTurn && !movementDone) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '100%',\n                color: '#fff',\n                fontSize: '1.6em',\n                fontWeight: 'bold',\n                textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n              },\n              children: \"Your Turn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this);\n          }\n\n          // Buy Property\n          if (isMyTurn && (tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.type) === 'property' && !players.some(p => p.properties.includes(tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.id))) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                gap: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBuy,\n                disabled: player.money < tileMeta.cost,\n                style: {\n                  padding: '12px 24px',\n                  fontSize: '1.1em',\n                  backgroundColor: player.money >= tileMeta.cost ? '#4CAF50' : '#ccc',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '8px',\n                  cursor: player.money >= tileMeta.cost ? 'pointer' : 'not-allowed'\n                },\n                children: [\"Buy ($\", tileMeta.cost, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 19\n              }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: 'tomato',\n                  margin: 0\n                },\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 17\n            }, this);\n          }\n\n          // Casino\n          if (inCasino && isMyTurn) {\n            return /*#__PURE__*/_jsxDEV(CasinoBetting, {\n              isMyTurn: isMyTurn,\n              currentMoney: (player === null || player === void 0 ? void 0 : player.money) || 0,\n              socket: socket,\n              player: player,\n              onCasinoPlayed: () => setHasCasinoPlayed(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this);\n          }\n\n          // Corner Choice\n          if (isMyTurn && tileMeta !== null && tileMeta !== void 0 && (_tileMeta$name = tileMeta.name) !== null && _tileMeta$name !== void 0 && _tileMeta$name.toLowerCase().includes('choose corner')) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'grid',\n                gridTemplateColumns: '1fr 1fr',\n                gridTemplateRows: '1fr 1fr',\n                gap: '10px',\n                width: '100%',\n                maxWidth: '400px',\n                padding: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 1,\n                    prevTile: 30\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundImage: `url(${startIcon})`,\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  minHeight: '120px',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Start\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 7,\n                    prevTile: 6\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundImage: `url(${hotelIcon})`,\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  minHeight: '120px',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Hotel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 682,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 657,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 16,\n                    prevTile: 15\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundImage: `url(${casinoIcon})`,\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  minHeight: '120px',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Casino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  socket.emit('teleport', {\n                    toTile: 22,\n                    prevTile: 21\n                  });\n                  setError(null);\n                },\n                style: {\n                  margin: 0,\n                  padding: 0,\n                  border: '2px solid #666',\n                  borderRadius: '8px',\n                  backgroundImage: `url(${roadIcon})`,\n                  backgroundSize: 'contain',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'flex-end',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                  minHeight: '120px',\n                  position: 'relative',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    padding: '4px 8px',\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    borderRadius: '0 0 6px 6px',\n                    color: '#fff',\n                    fontWeight: 'bold',\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                    position: 'absolute',\n                    bottom: 0,\n                    width: '100%',\n                    textAlign: 'center'\n                  },\n                  children: \"Road\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 758,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 17\n            }, this);\n          }\n\n          // Show error message if any\n          if (error) {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'tomato',\n                margin: 0\n              },\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 17\n            }, this);\n          }\n\n          // Show empty state for non-turn players or when no action is needed\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n              color: 'rgba(255, 255, 255, 0.7)',\n              fontSize: '1.2em'\n            },\n            children: \"\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 15\n          }, this);\n        })()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n}\n_s2(GameScreen, \"n1UuZL5yGebfeXedhYSDzNhdFS8=\");\n_c2 = GameScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"CasinoBetting\");\n$RefreshReg$(_c2, \"GameScreen\");","map":{"version":3,"names":["React","useContext","useState","useEffect","bgImage","Dicebox","startIcon","hotelIcon","casinoIcon","roadIcon","Board","DiceRoller","Dashboard","PlayerStats","GameContext","tiles","jsxDEV","_jsxDEV","Fragment","_Fragment","CasinoBetting","isMyTurn","currentMoney","socket","player","onCasinoPlayed","_s","betAmount","setBetAmount","selectedBet","setSelectedBet","showResult","setShowResult","diceResult","setDiceResult","isActive","setIsActive","handleAmountChange","delta","newAmount","Math","max","min","handleBetSelect","bet","handleRoll","emit","betType","handleCasinoResult","playerId","dice","amount","won","playerMoney","socketId","on","off","style","display","flexDirection","alignItems","justifyContent","height","gap","children","src","alt","width","fileName","_jsxFileName","lineNumber","columnNumber","color","fontWeight","fontSize","onClick","disabled","padding","cursor","border","borderRadius","minWidth","textAlign","map","backgroundColor","textTransform","marginTop","opacity","_c","GameScreen","_s2","players","setPlayer","setPlayers","currentPlayerId","movementDone","error","setError","testRollInput","setTestRollInput","testRollMode","setTestRollMode","inCasino","setInCasino","hasCasinoPlayed","setHasCasinoPlayed","tileMeta","find","t","id","tileId","handleKeyPress","e","key","startsWith","rollNumber","parseInt","slice","isNaN","testRoll","prev","length","window","addEventListener","removeEventListener","console","log","type","cost","money","properties","updated","p","playerSocketId","newMoney","reason","setTimeout","payerSocketId","payerMoney","ownerSocketId","ownerMoney","propertyName","_players$find","name","_players$find2","playerName","isCasinoTile","handleBuy","minHeight","position","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","overflow","flex","background","borderTop","boxShadow","zIndex","margin","borderRight","top","left","objectFit","objectPosition","pointerEvents","transform","_tileMeta$name","textShadow","some","includes","toLowerCase","gridTemplateColumns","gridTemplateRows","maxWidth","toTile","prevTile","bottom","_c2","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/components/GameScreen.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport bgImage from '../assets/bg.png';\nimport Dicebox from '../assets/diceBoard.png';\nimport startIcon from '../assets/start.png';\nimport hotelIcon from '../assets/hotel.png';\nimport casinoIcon from '../assets/casino.png';\nimport roadIcon from '../assets/road.png';\nimport Board from './Board';\nimport DiceRoller from './DiceRoller';\nimport Dashboard from './Dashboard';\nimport PlayerStats from './PlayerStats';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\n\nconst CasinoBetting = ({ isMyTurn, currentMoney, socket, player, onCasinoPlayed }) => {\n  const [betAmount, setBetAmount] = useState(1000);\n  const [selectedBet, setSelectedBet] = useState(null);\n  const [showResult, setShowResult] = useState(null);\n  const [diceResult, setDiceResult] = useState(null);\n  const [isActive, setIsActive] = useState(true);\n\n  const handleAmountChange = (delta) => {\n    const newAmount = Math.max(1000, Math.min(currentMoney, betAmount + delta));\n    setBetAmount(newAmount);\n  };\n\n  const handleBetSelect = (bet) => {\n    setSelectedBet(bet);\n  };\n\n  const handleRoll = () => {\n    if (selectedBet && betAmount >= 1000 && betAmount <= currentMoney) {\n      socket.emit('casinoRoll', { betAmount, betType: selectedBet });\n    }\n  };\n\n  useEffect(() => {\n    const handleCasinoResult = ({ playerId, dice, amount, won, playerMoney }) => {\n      if (playerId === player.socketId) {\n        setDiceResult(dice);\n        setShowResult({ won, amount });\n        setIsActive(false);\n        onCasinoPlayed();\n      }\n    };\n\n    socket.on('casinoResult', handleCasinoResult);\n    return () => socket.off('casinoResult', handleCasinoResult);\n  }, [socket, player.socketId, onCasinoPlayed]);\n\n  // If not active (after result), show nothing\n  if (!isActive) {\n    if (showResult && diceResult) {\n      return (\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%',\n          gap: '20px'\n        }}>\n          <div style={{\n            display: 'flex',\n            gap: '10px',\n            justifyContent: 'center'\n          }}>\n            <img \n              src={`/dice/dice${diceResult[0]}.png`} \n              alt={`Die ${diceResult[0]}`} \n              width={125}\n              height={125}\n            />\n            <img \n              src={`/dice/dice${diceResult[1]}.png`} \n              alt={`Die ${diceResult[1]}`} \n              width={125}\n              height={125}\n            />\n          </div>\n          <div style={{\n            color: showResult.won ? '#4CAF50' : '#f44336',\n            fontWeight: 'bold',\n            fontSize: '1.2em'\n          }}>\n            {showResult.won ? `You won $${showResult.amount}!` : `You lost $${showResult.amount}`}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      gap: '15px'\n    }}>\n      {/* Bet amount control */}\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px'\n      }}>\n        <button\n          onClick={() => handleAmountChange(-1000)}\n          disabled={!isMyTurn || betAmount <= 1000}\n          style={{\n            padding: '8px 12px',\n            fontSize: '1.2em',\n            cursor: isMyTurn ? 'pointer' : 'not-allowed'\n          }}\n        >\n          -\n        </button>\n        <div style={{\n          padding: '8px 16px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          minWidth: '100px',\n          textAlign: 'center'\n        }}>\n          ${betAmount}\n        </div>\n        <button\n          onClick={() => handleAmountChange(1000)}\n          disabled={!isMyTurn || betAmount >= currentMoney}\n          style={{\n            padding: '8px 12px',\n            fontSize: '1.2em',\n            cursor: isMyTurn ? 'pointer' : 'not-allowed'\n          }}\n        >\n          +\n        </button>\n      </div>\n\n      {/* Bet type buttons */}\n      <div style={{\n        display: 'flex',\n        gap: '10px'\n      }}>\n        {['above', '7', 'below'].map(bet => (\n          <button\n            key={bet}\n            onClick={() => handleBetSelect(bet)}\n            disabled={!isMyTurn}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: selectedBet === bet ? '#4CAF50' : '#fff',\n              color: selectedBet === bet ? '#fff' : '#000',\n              border: '1px solid #666',\n              borderRadius: '4px',\n              cursor: isMyTurn ? 'pointer' : 'not-allowed',\n              textTransform: 'capitalize'\n            }}\n          >\n            {bet}\n          </button>\n        ))}\n      </div>\n\n      {/* Roll button */}\n      <button\n        onClick={handleRoll}\n        disabled={!isMyTurn || !selectedBet || betAmount < 1000 || betAmount > currentMoney}\n        style={{\n          padding: '8px 24px',\n          backgroundColor: '#2196F3',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          marginTop: '10px',\n          cursor: isMyTurn && selectedBet ? 'pointer' : 'not-allowed',\n          opacity: isMyTurn && selectedBet ? 1 : 0.7\n        }}\n      >\n        Roll\n      </button>\n    </div>\n  );\n};\n\nexport default function GameScreen() {\n  const {\n    player,\n    players,\n    setPlayer,\n    setPlayers,\n    currentPlayerId,\n    socket,\n    movementDone\n  } = useContext(GameContext);\n\n  const isMyTurn = player?.socketId === currentPlayerId;\n  const [error, setError] = useState(null);\n  const [testRollInput, setTestRollInput] = useState('');\n  const [testRollMode, setTestRollMode] = useState(false);\n  const [inCasino, setInCasino] = useState(false);\n  const [hasCasinoPlayed, setHasCasinoPlayed] = useState(false);\n\n  // Determine metadata for the current tile\n  const tileMeta = tiles.find(t => t.id === player?.tileId);\n\n  // Add keyboard listener for test rolls\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (!isMyTurn) return;\n\n      // Build up the test roll input\n      if (e.key === 'Enter' && testRollInput.startsWith('testroll')) {\n        const rollNumber = parseInt(testRollInput.slice(8));\n        if (!isNaN(rollNumber) && rollNumber >= 2 && rollNumber <= 12) {\n          socket.emit('rollDice', { testRoll: rollNumber });\n          setTestRollInput('');\n          setTestRollMode(false);\n        }\n      } else if (e.key === 'Backspace') {\n        setTestRollInput(prev => prev.slice(0, -1));\n      } else if (e.key.length === 1) { // Regular character\n        setTestRollInput(prev => prev + e.key);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isMyTurn, testRollInput, socket]);\n\n  // Show current test roll input if active\n  useEffect(() => {\n    if (testRollInput.startsWith('testroll')) {\n      setTestRollMode(true);\n    } else if (testRollInput.length === 0) {\n      setTestRollMode(false);\n    }\n  }, [testRollInput]);\n\n  // Debug logging to trace condition\n  useEffect(() => {\n    console.log('[GameScreen] Debug:', {\n      isMyTurn,\n      movementDone,\n      tileMeta,\n      \"player.tileId\": player?.tileId,\n      \"tileMeta.type\": tileMeta?.type,\n      \"tileMeta.cost\": tileMeta?.cost,\n      \"player.money\": player?.money,\n      testRollMode,\n      testRollInput\n    });\n  }, [isMyTurn, movementDone, tileMeta, player, testRollMode, testRollInput]);\n\n  // Listen for purchase events\n  useEffect(() => {\n    socket.on('purchaseSuccess', ({ socketId, money, properties }) => {\n      console.log('[GameScreen] purchaseSuccess', { socketId, money, properties });\n      const updated = players.map(p =>\n        p.socketId === socketId ? { ...p, money, properties } : p\n      );\n      setPlayers(updated);\n      if (player.socketId === socketId) {\n        setPlayer({ ...player, money, properties });\n      }\n      setError(null);\n    });\n\n    // Add start bonus handler\n    socket.on('startBonus', ({ playerSocketId, newMoney, amount, reason }) => {\n      console.log('[GameScreen] startBonus', { playerSocketId, newMoney, amount, reason });\n      \n      // Update players' money\n      const updated = players.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      );\n      setPlayers(updated);\n\n      // Update current player's money if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({ ...player, money: newMoney });\n        setError(`You received $${amount} for ${reason} Start!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add playerMoved event handler\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      console.log('[GameScreen] playerMoved', { playerId, tileId });\n      if (playerId === player?.socketId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n      setPlayers(prev => \n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      // Clear any previous messages when a player moves\n      setError(null);\n    });\n\n    socket.on('purchaseFailed', ({ reason }) => {\n      console.log('[GameScreen] purchaseFailed', reason);\n      if (reason === 'insufficientFunds') {\n        setError(\"You don't have enough money.\");\n      } else if (reason === 'alreadyOwned') {\n        setError('You already own this property.');\n      } else {\n        setError('Cannot buy this property.');\n      }\n      // Clear error message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent payment handler\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney, amount, propertyName }) => {\n      console.log('[GameScreen] rentPaid', { payerSocketId, ownerSocketId, amount });\n      \n      // Update players' money\n      const updated = players.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      });\n      setPlayers(updated);\n\n      // Update current player's money if they were involved\n      if (player.socketId === payerSocketId) {\n        setPlayer({ ...player, money: payerMoney });\n        setError(`You paid $${amount} rent to ${players.find(p => p.socketId === ownerSocketId)?.name} for landing on ${propertyName}`);\n      } else if (player.socketId === ownerSocketId) {\n        setPlayer({ ...player, money: ownerMoney });\n        setError(`You received $${amount} rent from ${players.find(p => p.socketId === payerSocketId)?.name} for ${propertyName}`);\n      }\n      // Clear rent message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent bonus handler\n    socket.on('rentBonus', ({ playerSocketId, newMoney, amount, propertyName }) => {\n      console.log('[GameScreen] rentBonus', { playerSocketId, amount });\n      \n      // Update player's money\n      const updated = players.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      );\n      setPlayers(updated);\n\n      // Update current player if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({ ...player, money: newMoney });\n        setError(`You received $${amount} bonus for landing on your property ${propertyName}!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    // Add casino result handler for other players\n    socket.on('casinoResult', ({ playerId, dice, amount, won, playerName, playerMoney }) => {\n      console.log('[GameScreen] casinoResult', { playerId, dice, amount, won, playerName, playerMoney });\n      \n      // Update player money in the game state\n      const updated = players.map(p =>\n        p.socketId === playerId ? { ...p, money: playerMoney } : p\n      );\n      setPlayers(updated);\n      \n      if (player.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, money: playerMoney }));\n      } else {\n        setError(`${playerName} ${won ? 'won' : 'lost'} $${amount} at the casino!`);\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    return () => {\n      socket.off('purchaseSuccess');\n      socket.off('purchaseFailed');\n      socket.off('rentPaid');\n      socket.off('playerMoved');\n      socket.off('rentBonus');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n    };\n  }, [socket, player, players, setPlayer, setPlayers]);\n\n  // Update inCasino state when tile changes\n  useEffect(() => {\n    const isCasinoTile = tileMeta?.id === 16;\n    setInCasino(isCasinoTile);\n    if (isCasinoTile) {\n      setHasCasinoPlayed(false);\n    }\n  }, [tileMeta]);\n\n  // Reset casino states when turn ends\n  useEffect(() => {\n    if (!isMyTurn) {\n      setInCasino(false);\n      setHasCasinoPlayed(false);\n    }\n  }, [isMyTurn]);\n\n  const handleBuy = () => {\n    console.log('[GameScreen] handleBuy invoked');\n    setError(null);\n    socket.emit('buyProperty');\n  };\n\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      minWidth: '1200px',\n      position: 'relative',\n      backgroundImage: `url(${bgImage})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      overflow: 'auto'\n    }}>\n      {/* Main content (board & player stats) */}\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative',\n        minWidth: '1080px',\n        padding: '20px'\n      }}>\n        {/* Board with centered positioning */}\n        <div style={{ \n          position: 'relative',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '100%',\n          height: '100%'\n        }}>\n          <div style={{ position: 'relative' }}>\n            <Board />\n            <PlayerStats />\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom sections (not fixed anymore) */}\n      <div style={{\n        width: '80%',\n        minWidth: '1000px',\n        height: '240px',\n        minHeight: '380px',\n        background: 'rgba(80, 80, 80, 0.9)',\n        borderTop: '2px solid #bbb',\n        boxShadow: '0 -2px 10px rgba(0, 0, 0, 0.2)',\n        zIndex: 100,\n        display: 'flex',\n        border: '2px solid #666',\n        borderRadius: '30px 30px 0 0',\n        margin: '0 auto 0 auto'\n      }}>\n        {/* Dice Roller Section */}\n        <div style={{\n          flex: 1,\n          position: 'relative',\n          borderRight: '2px solid #666',\n          padding: '10px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: 'rgba(60, 60, 60, 0.3)',\n          borderRadius: '30px 30px 30px 30px',\n          overflow: 'hidden'\n        }}>\n          {isMyTurn && (\n            <>\n              <img\n                src={Dicebox}\n                alt=\"Dice Board\"\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'fill',\n                  objectPosition: 'center',\n                  pointerEvents: 'none'\n                }}\n              />\n              {testRollMode && (\n                <div style={{\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                  color: '#fff',\n                  padding: '8px 16px',\n                  borderRadius: '4px',\n                  zIndex: 100\n                }}>\n                  {testRollInput}\n                </div>\n              )}\n            </>\n          )}\n          <DiceRoller \n            testRollMode={testRollMode} \n            hasCasinoPlayed={hasCasinoPlayed}\n            style={{ position: 'relative', zIndex: 1 }}\n          />\n        </div>\n\n        {/* Dashboard Section */}\n        <div style={{\n          flex: 1,\n          borderRight: '2px solid #666',\n          padding: '10px',\n          display: 'flex',\n          flexDirection: 'column',\n          background: 'rgba(60, 60, 60, 0.3)'\n        }}>\n          <Dashboard />\n        </div>\n\n        {/* Events Section */}\n        <div style={{\n          flex: 1,\n          padding: '10px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: 'rgba(60, 60, 60, 0.3)',\n          borderRadius: '0 10px 0 0'\n        }}>\n          {(() => {\n            // Show \"Your Turn\" for current player before landing\n            if (isMyTurn && !movementDone) {\n              return (\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  height: '100%',\n                  color: '#fff',\n                  fontSize: '1.6em',\n                  fontWeight: 'bold',\n                  textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n                }}>\n                  Your Turn\n                </div>\n              );\n            }\n\n            // Buy Property\n            if (isMyTurn && tileMeta?.type === 'property' && \n                !players.some(p => p.properties.includes(tileMeta?.id))) {\n              return (\n                <div style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  gap: '10px'\n                }}>\n                  <button\n                    onClick={handleBuy}\n                    disabled={player.money < tileMeta.cost}\n                    style={{\n                      padding: '12px 24px',\n                      fontSize: '1.1em',\n                      backgroundColor: player.money >= tileMeta.cost ? '#4CAF50' : '#ccc',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '8px',\n                      cursor: player.money >= tileMeta.cost ? 'pointer' : 'not-allowed'\n                    }}\n                  >\n                    Buy (${tileMeta.cost})\n                  </button>\n                  {error && (\n                    <p style={{ color: 'tomato', margin: 0 }}>{error}</p>\n                  )}\n                </div>\n              );\n            }\n\n            // Casino\n            if (inCasino && isMyTurn) {\n              return (\n                <CasinoBetting \n                  isMyTurn={isMyTurn} \n                  currentMoney={player?.money || 0}\n                  socket={socket}\n                  player={player}\n                  onCasinoPlayed={() => setHasCasinoPlayed(true)}\n                />\n              );\n            }\n\n            // Corner Choice\n            if (isMyTurn && tileMeta?.name?.toLowerCase().includes('choose corner')) {\n              return (\n                <div style={{\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr',\n                  gridTemplateRows: '1fr 1fr',\n                  gap: '10px',\n                  width: '100%',\n                  maxWidth: '400px',\n                  padding: '10px'\n                }}>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 1, prevTile: 30 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundImage: `url(${startIcon})`,\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      minHeight: '120px',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Start</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 7, prevTile: 6 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundImage: `url(${hotelIcon})`,\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      minHeight: '120px',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Hotel</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 16, prevTile: 15 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundImage: `url(${casinoIcon})`,\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      minHeight: '120px',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Casino</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      socket.emit('teleport', { toTile: 22, prevTile: 21 });\n                      setError(null);\n                    }}\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      border: '2px solid #666',\n                      borderRadius: '8px',\n                      backgroundImage: `url(${roadIcon})`,\n                      backgroundSize: 'contain',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center center',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      justifyContent: 'center',\n                      width: '100%',\n                      height: '100%',\n                      minHeight: '120px',\n                      position: 'relative',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                    }}\n                  >\n                    <span style={{\n                      padding: '4px 8px',\n                      backgroundColor: 'rgba(0,0,0,0.5)',\n                      borderRadius: '0 0 6px 6px',\n                      color: '#fff',\n                      fontWeight: 'bold',\n                      textShadow: '2px 2px 4px rgba(0,0,0,0.7)',\n                      position: 'absolute',\n                      bottom: 0,\n                      width: '100%',\n                      textAlign: 'center'\n                    }}>Road</span>\n                  </button>\n                </div>\n              );\n            }\n\n            // Show error message if any\n            if (error) {\n              return (\n                <p style={{ color: 'tomato', margin: 0 }}>{error}</p>\n              );\n            }\n\n            // Show empty state for non-turn players or when no action is needed\n            return (\n              <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '100%',\n                color: 'rgba(255, 255, 255, 0.7)',\n                fontSize: '1.2em'\n              }}>\n                &nbsp;\n              </div>\n            );\n          })()}\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}