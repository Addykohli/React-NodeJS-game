{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\n// client/src/context/GameContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\n\n// Create the game context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\n\n// Wrap your application in this provider to expose game state\nexport function GameProvider({\n  children\n}) {\n  _s();\n  // The currently logged-in player\n  const [player, setPlayer] = useState(null);\n  // All players in the lobby or game\n  const [players, setPlayers] = useState([]);\n  // ID of the player whose turn it currently is\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  // MongoDB session ID once the game starts\n  const [sessionId, setSessionId] = useState(null);\n  useEffect(() => {\n    // Lobby updates (join, piece selection, ready)\n    socket.on('lobbyUpdate', updatedPlayers => {\n      setPlayers(updatedPlayers);\n    });\n\n    // Game start: receive full player list and session ID\n    socket.on('gameStart', ({\n      players: ps,\n      sessionId: sid\n    }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      // Optionally set currentPlayerId here if included in payload\n    });\n\n    // Turn ended: update whose turn is next\n    socket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n    });\n\n    // Dice result: could store last roll if needed\n    socket.on('diceResult', ({\n      playerId,\n      die1,\n      die2,\n      total\n    }) => {\n      // e.g. setLastRoll({ playerId, die1, die2, total });\n    });\n\n    // Player movement: update that player's tileId\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      setPlayers(prev => prev.map(p => p.id === playerId ? {\n        ...p,\n        tileId\n      } : p));\n    });\n\n    // Cleanup listeners on unmount\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      player,\n      setPlayer,\n      players,\n      currentPlayerId,\n      sessionId,\n      socket\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"bjjxp1IdArXDFNT2V+mrwDVE/mI=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","socket","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","on","updatedPlayers","ps","sid","nextPlayerId","playerId","die1","die2","total","tileId","prev","map","p","id","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web/client/src/context/GameContext.js"],"sourcesContent":["// client/src/context/GameContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport socket from '../socket';\r\n\r\n// Create the game context\r\nexport const GameContext = createContext();\r\n\r\n// Wrap your application in this provider to expose game state\r\nexport function GameProvider({ children }) {\r\n  // The currently logged-in player\r\n  const [player, setPlayer] = useState(null);\r\n  // All players in the lobby or game\r\n  const [players, setPlayers] = useState([]);\r\n  // ID of the player whose turn it currently is\r\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\r\n  // MongoDB session ID once the game starts\r\n  const [sessionId, setSessionId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Lobby updates (join, piece selection, ready)\r\n    socket.on('lobbyUpdate', updatedPlayers => {\r\n      setPlayers(updatedPlayers);\r\n    });\r\n\r\n    // Game start: receive full player list and session ID\r\n    socket.on('gameStart', ({ players: ps, sessionId: sid }) => {\r\n      setPlayers(ps);\r\n      setSessionId(sid);\r\n      // Optionally set currentPlayerId here if included in payload\r\n    });\r\n\r\n    // Turn ended: update whose turn is next\r\n    socket.on('turnEnded', ({ nextPlayerId }) => {\r\n      setCurrentPlayerId(nextPlayerId);\r\n    });\r\n\r\n    // Dice result: could store last roll if needed\r\n    socket.on('diceResult', ({ playerId, die1, die2, total }) => {\r\n      // e.g. setLastRoll({ playerId, die1, die2, total });\r\n    });\r\n\r\n    // Player movement: update that player's tileId\r\n    socket.on('playerMoved', ({ playerId, tileId }) => {\r\n      setPlayers(prev =>\r\n        prev.map(p => (p.id === playerId ? { ...p, tileId } : p))\r\n      );\r\n    });\r\n\r\n    // Cleanup listeners on unmount\r\n    return () => {\r\n      socket.off('lobbyUpdate');\r\n      socket.off('gameStart');\r\n      socket.off('turnEnded');\r\n      socket.off('diceResult');\r\n      socket.off('playerMoved');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        player,\r\n        setPlayer,\r\n        players,\r\n        currentPlayerId,\r\n        sessionId,\r\n        socket\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,MAAM,MAAM,WAAW;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C;EACA,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5D;EACA,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACAC,MAAM,CAACe,EAAE,CAAC,aAAa,EAAEC,cAAc,IAAI;MACzCN,UAAU,CAACM,cAAc,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACAhB,MAAM,CAACe,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEN,OAAO,EAAEQ,EAAE;MAAEJ,SAAS,EAAEK;IAAI,CAAC,KAAK;MAC1DR,UAAU,CAACO,EAAE,CAAC;MACdH,YAAY,CAACI,GAAG,CAAC;MACjB;IACF,CAAC,CAAC;;IAEF;IACAlB,MAAM,CAACe,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEI;IAAa,CAAC,KAAK;MAC3CP,kBAAkB,CAACO,YAAY,CAAC;IAClC,CAAC,CAAC;;IAEF;IACAnB,MAAM,CAACe,EAAE,CAAC,YAAY,EAAE,CAAC;MAAEK,QAAQ;MAAEC,IAAI;MAAEC,IAAI;MAAEC;IAAM,CAAC,KAAK;MAC3D;IAAA,CACD,CAAC;;IAEF;IACAvB,MAAM,CAACe,EAAE,CAAC,aAAa,EAAE,CAAC;MAAEK,QAAQ;MAAEI;IAAO,CAAC,KAAK;MACjDd,UAAU,CAACe,IAAI,IACbA,IAAI,CAACC,GAAG,CAACC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKR,QAAQ,GAAG;QAAE,GAAGO,CAAC;QAAEH;MAAO,CAAC,GAAGG,CAAE,CAC1D,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX3B,MAAM,CAAC6B,GAAG,CAAC,aAAa,CAAC;MACzB7B,MAAM,CAAC6B,GAAG,CAAC,WAAW,CAAC;MACvB7B,MAAM,CAAC6B,GAAG,CAAC,WAAW,CAAC;MACvB7B,MAAM,CAAC6B,GAAG,CAAC,YAAY,CAAC;MACxB7B,MAAM,CAAC6B,GAAG,CAAC,aAAa,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IACnBC,KAAK,EAAE;MACLxB,MAAM;MACNC,SAAS;MACTC,OAAO;MACPE,eAAe;MACfE,SAAS;MACTb;IACF,CAAE;IAAAK,QAAA,EAEDA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC7B,EAAA,CAhEeF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}