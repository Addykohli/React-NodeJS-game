{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web\\\\client\\\\src\\\\components\\\\DiceRoller.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { GameContext } from '../context/GameContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiceRoller = () => {\n  _s();\n  var _players$currentPlaye;\n  const {\n    player,\n    players,\n    currentPlayerIndex,\n    isMoving,\n    originalCount,\n    setOriginalCount,\n    setIsMoving,\n    setCurrentPlayerIndex\n  } = useContext(GameContext);\n  const [diceRoll, setDiceRoll] = useState(null);\n\n  // only show on your turn\n  if (!player || ((_players$currentPlaye = players[currentPlayerIndex]) === null || _players$currentPlaye === void 0 ? void 0 : _players$currentPlaye.name) !== player.name) {\n    return null;\n  }\n  const rollDice = () => {\n    if (isMoving || diceRoll) return;\n    const d1 = Math.ceil(Math.random() * 6);\n    const d2 = Math.ceil(Math.random() * 6);\n    setDiceRoll([d1, d2]);\n    setOriginalCount(d1 + d2);\n    setIsMoving(true);\n  };\n  const handleDone = () => {\n    setDiceRoll(null);\n    setCurrentPlayerIndex(idx => (idx + 1) % players.length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '10%',\n      background: '#fff',\n      border: '2px solid #333',\n      borderRadius: '12px',\n      padding: '1rem',\n      boxShadow: '0 4px 10px rgba(0,0,0,0.2)',\n      zIndex: 1000,\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), !diceRoll && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      children: \"Roll Dice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this), diceRoll && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '1rem 0'\n      },\n      children: diceRoll.map((d, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `/dice/dice${d}.png`,\n        alt: `Die ${d}`,\n        width: 50,\n        style: {\n          margin: '0 5px'\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), diceRoll && !isMoving && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDone,\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(DiceRoller, \"s8Ng6s2OTDaPSH9+Jo2BlayZVDA=\");\n_c = DiceRoller;\nexport default DiceRoller;\nvar _c;\n$RefreshReg$(_c, \"DiceRoller\");","map":{"version":3,"names":["React","useContext","useState","GameContext","jsxDEV","_jsxDEV","DiceRoller","_s","_players$currentPlaye","player","players","currentPlayerIndex","isMoving","originalCount","setOriginalCount","setIsMoving","setCurrentPlayerIndex","diceRoll","setDiceRoll","name","rollDice","d1","Math","ceil","random","d2","handleDone","idx","length","style","position","top","background","border","borderRadius","padding","boxShadow","zIndex","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","display","justifyContent","margin","map","d","i","src","alt","width","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web/client/src/components/DiceRoller.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { GameContext } from '../context/GameContext';\n\nconst DiceRoller = () => {\n  const {\n    player,\n    players,\n    currentPlayerIndex,\n    isMoving,\n    originalCount,\n    setOriginalCount,\n    setIsMoving,\n    setCurrentPlayerIndex\n  } = useContext(GameContext);\n  const [diceRoll, setDiceRoll] = useState(null);\n\n  // only show on your turn\n  if (!player || players[currentPlayerIndex]?.name !== player.name) {\n    return null;\n  }\n\n  const rollDice = () => {\n    if (isMoving || diceRoll) return;\n    const d1 = Math.ceil(Math.random() * 6);\n    const d2 = Math.ceil(Math.random() * 6);\n    setDiceRoll([d1, d2]);\n    setOriginalCount(d1 + d2);\n    setIsMoving(true);\n  };\n\n  const handleDone = () => {\n    setDiceRoll(null);\n    setCurrentPlayerIndex((idx) => (idx + 1) % players.length);\n  };\n\n  return (\n    <div style={{\n      position: 'absolute',\n      top: '10%',\n      background: '#fff',\n      border: '2px solid #333',\n      borderRadius: '12px',\n      padding: '1rem',\n      boxShadow: '0 4px 10px rgba(0,0,0,0.2)',\n      zIndex: 1000,\n      textAlign: 'center'\n    }}>\n      <h3>Your Turn</h3>\n      {!diceRoll && <button onClick={rollDice}>Roll Dice</button>}\n      {diceRoll && (\n        <div style={{ display: 'flex', justifyContent: 'center', margin: '1rem 0' }}>\n          {diceRoll.map((d, i) => (\n            <img\n              key={i}\n              src={`/dice/dice${d}.png`}\n              alt={`Die ${d}`}\n              width={50}\n              style={{ margin: '0 5px' }}\n            />\n          ))}\n        </div>\n      )}\n      {diceRoll && !isMoving && (\n        <button onClick={handleDone}>Done</button>\n      )}\n    </div>\n  );\n};\n\nexport default DiceRoller;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}