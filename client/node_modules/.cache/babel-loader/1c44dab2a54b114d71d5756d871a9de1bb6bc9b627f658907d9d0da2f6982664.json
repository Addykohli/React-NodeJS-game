{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  // Add loan handling\n  useEffect(() => {\n    socket.on('loanUpdated', ({\n      playerId,\n      newMoney,\n      loanAmount\n    }) => {\n      console.log('[GameContext] Loan update:', {\n        playerId,\n        newMoney,\n        loanAmount\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            loan: loanAmount\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          loan: loanAmount\n        }));\n      }\n    });\n    return () => {\n      socket.off('loanUpdated');\n    };\n  }, [socket === null || socket === void 0 ? void 0 : socket.id, player === null || player === void 0 ? void 0 : player.socketId]);\n\n  // Update player whenever players array changes\n  useEffect(() => {\n    if (socket !== null && socket !== void 0 && socket.id && players.length > 0) {\n      const me = players.find(p => p.socketId === socket.id);\n      if (me) {\n        console.log('[GameContext] Updating player from players array:', {\n          playerId: me.socketId,\n          money: me.money\n        });\n        setPlayer(me);\n      }\n    }\n  }, [players, socket === null || socket === void 0 ? void 0 : socket.id]);\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({\n      players: ps,\n      sessionId: sid,\n      currentPlayerId: cid\n    }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({\n      playerId,\n      die1,\n      die2,\n      total\n    }) => {\n      setDiceRoll({\n        playerId,\n        die1,\n        die2,\n        total\n      });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n\n      // Update current player's position if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney\n    }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney,\n        currentPlayerSocketId: socket.id\n      });\n\n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      }));\n    });\n\n    // RENT BONUS\n    socket.on('rentBonus', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      console.log('[GameContext] Updating money after rent bonus:', {\n        playerSocketId,\n        newMoney,\n        currentPlayerSocketId: socket.id\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({\n      playerId,\n      propertyId,\n      action,\n      newMoney\n    }) => {\n      console.log('[GameContext] Property update:', {\n        playerId,\n        propertyId,\n        action,\n        newMoney\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' ? [...(p.properties || []), propertyId] : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add' ? [...(prev.properties || []), propertyId] : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({\n      playerId,\n      playerMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        money: playerMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: playerMoney\n        }));\n      }\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n    });\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('rentBonus');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n    };\n  }, [socket === null || socket === void 0 ? void 0 : socket.id]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      socket,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone,\n      insufficientFunds,\n      setInsufficientFunds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"D+bolnA47knZOt08D+SAjCVLE0g=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","socket","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","gameState","setGameState","diceRoll","setDiceRoll","movementDone","setMovementDone","insufficientFunds","setInsufficientFunds","on","playerId","newMoney","loanAmount","console","log","prev","map","p","socketId","money","loan","off","id","length","me","find","updated","ps","sid","cid","nextPlayerId","die1","die2","total","tileId","payerSocketId","payerMoney","ownerSocketId","ownerMoney","currentPlayerSocketId","playerSocketId","propertyId","action","properties","filter","playerMoney","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\n\nexport const GameContext = createContext();\n\nexport function GameProvider({ children }) {\n  const [player, setPlayer]               = useState(null);\n  const [players, setPlayers]             = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId]         = useState(null);\n  const [gameState, setGameState]         = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll]           = useState(null);\n  const [movementDone, setMovementDone]   = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  // Add loan handling\n  useEffect(() => {\n    socket.on('loanUpdated', ({ playerId, newMoney, loanAmount }) => {\n      console.log('[GameContext] Loan update:', { playerId, newMoney, loanAmount });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            loan: loanAmount\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          loan: loanAmount\n        }));\n      }\n    });\n\n    return () => {\n      socket.off('loanUpdated');\n    };\n  }, [socket?.id, player?.socketId]);\n\n  // Update player whenever players array changes\n  useEffect(() => {\n    if (socket?.id && players.length > 0) {\n      const me = players.find(p => p.socketId === socket.id);\n      if (me) {\n        console.log('[GameContext] Updating player from players array:', {\n          playerId: me.socketId,\n          money: me.money\n        });\n        setPlayer(me);\n      }\n    }\n  }, [players, socket?.id]);\n\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({ players: ps, sessionId: sid, currentPlayerId: cid }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({ nextPlayerId }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({ playerId, die1, die2, total }) => {\n      setDiceRoll({ playerId, die1, die2, total });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      setPlayers(prev =>\n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      \n      // Update current player's position if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney,\n        currentPlayerSocketId: socket.id\n      });\n      \n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      }));\n    });\n\n    // RENT BONUS\n    socket.on('rentBonus', ({ playerSocketId, newMoney }) => {\n      console.log('[GameContext] Updating money after rent bonus:', {\n        playerSocketId,\n        newMoney,\n        currentPlayerSocketId: socket.id\n      });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({ playerId, propertyId, action, newMoney }) => {\n      console.log('[GameContext] Property update:', { playerId, propertyId, action, newMoney });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' \n              ? [...(p.properties || []), propertyId]\n              : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add'\n            ? [...(prev.properties || []), propertyId]\n            : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({ playerSocketId, newMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({ playerId, playerMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerId ? { ...p, money: playerMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, money: playerMoney }));\n      }\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({ playerSocketId, newMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n    });\n\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('rentBonus');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n    };\n  }, [socket?.id]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        player,\n        setPlayer,\n        players,\n        setPlayers,\n        currentPlayerId,\n        setCurrentPlayerId,\n        sessionId,\n        setSessionId,\n        socket,\n        gameState,\n        setGameState,\n        diceRoll,\n        setDiceRoll,\n        movementDone,\n        setMovementDone,\n        insufficientFunds,\n        setInsufficientFunds,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}