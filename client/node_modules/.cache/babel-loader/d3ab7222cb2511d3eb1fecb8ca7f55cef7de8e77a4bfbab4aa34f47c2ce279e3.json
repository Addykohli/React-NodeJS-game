{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n      const me = updated.find(p => p.socketId === socket.id);\n      if (me) setPlayer(me);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({\n      players: ps,\n      sessionId: sid,\n      currentPlayerId: cid\n    }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n\n      // Set the current player's state when reconnecting\n      const me = ps.find(p => p.socketId === socket.id);\n      if (me) setPlayer(me);\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({\n      playerId,\n      die1,\n      die2,\n      total\n    }) => {\n      setDiceRoll({\n        playerId,\n        die1,\n        die2,\n        total\n      });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n\n      // Update current player's position if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney\n    }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney\n      });\n\n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      }));\n\n      // Update current player's money if they were involved\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === payerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: payerMoney\n        }));\n      } else if ((player === null || player === void 0 ? void 0 : player.socketId) === ownerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: ownerMoney\n        }));\n      }\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({\n      playerId,\n      propertyId,\n      action,\n      newMoney\n    }) => {\n      console.log('[GameContext] Property update:', {\n        playerId,\n        propertyId,\n        action,\n        newMoney\n      });\n\n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' ? [...(p.properties || []), propertyId] : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add' ? [...(prev.properties || []), propertyId] : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({\n      playerId,\n      playerMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        money: playerMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: playerMoney\n        }));\n      }\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({\n      playerSocketId,\n      newMoney\n    }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p));\n\n      // Update current player if it's them\n      if ((player === null || player === void 0 ? void 0 : player.socketId) === playerSocketId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney\n        }));\n      }\n    });\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n    };\n  }, [player === null || player === void 0 ? void 0 : player.socketId]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      socket,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone,\n      insufficientFunds,\n      setInsufficientFunds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"G5iaBZLOg840qnJ3kBkaR/uw5LA=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","socket","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","gameState","setGameState","diceRoll","setDiceRoll","movementDone","setMovementDone","insufficientFunds","setInsufficientFunds","on","updated","me","find","p","socketId","id","ps","sid","cid","nextPlayerId","playerId","die1","die2","total","tileId","prev","map","payerSocketId","payerMoney","ownerSocketId","ownerMoney","console","log","money","propertyId","action","newMoney","properties","filter","playerSocketId","playerMoney","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\n\nexport const GameContext = createContext();\n\nexport function GameProvider({ children }) {\n  const [player, setPlayer]               = useState(null);\n  const [players, setPlayers]             = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId]         = useState(null);\n  const [gameState, setGameState]         = useState('lobby');\n\n  // dice + movement flags\n  const [diceRoll, setDiceRoll]           = useState(null);\n  const [movementDone, setMovementDone]   = useState(false);\n\n  // buy/rent UI\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  useEffect(() => {\n    // LOBBY UPDATE\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n      const me = updated.find(p => p.socketId === socket.id);\n      if (me) setPlayer(me);\n    });\n\n    // GAME START\n    socket.on('gameStart', ({ players: ps, sessionId: sid, currentPlayerId: cid }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cid);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n\n      // Set the current player's state when reconnecting\n      const me = ps.find(p => p.socketId === socket.id);\n      if (me) setPlayer(me);\n    });\n\n    // TURN ENDED\n    socket.on('turnEnded', ({ nextPlayerId }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      setInsufficientFunds(false);\n    });\n\n    // DICE RESULT\n    socket.on('diceResult', ({ playerId, die1, die2, total }) => {\n      setDiceRoll({ playerId, die1, die2, total });\n    });\n\n    // TILE MOVED\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      setPlayers(prev =>\n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      \n      // Update current player's position if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n    });\n\n    // MOVEMENT DONE\n    socket.on('movementDone', () => {\n      setMovementDone(true);\n    });\n\n    // INSUFFICIENT FUNDS\n    socket.on('insufficientFunds', () => {\n      setInsufficientFunds(true);\n    });\n\n    // RENT PAID\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney }) => {\n      console.log('[GameContext] Updating money after rent payment:', {\n        payerSocketId,\n        payerMoney,\n        ownerSocketId,\n        ownerMoney\n      });\n      \n      // Update all players' money\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      }));\n\n      // Update current player's money if they were involved\n      if (player?.socketId === payerSocketId) {\n        setPlayer(prev => ({ ...prev, money: payerMoney }));\n      } else if (player?.socketId === ownerSocketId) {\n        setPlayer(prev => ({ ...prev, money: ownerMoney }));\n      }\n    });\n\n    // PROPERTY UPDATED (for buying/selling)\n    socket.on('propertyUpdated', ({ playerId, propertyId, action, newMoney }) => {\n      console.log('[GameContext] Property update:', { playerId, propertyId, action, newMoney });\n      \n      // Update players list\n      setPlayers(prev => prev.map(p => {\n        if (p.socketId === playerId) {\n          return {\n            ...p,\n            money: newMoney,\n            properties: action === 'add' \n              ? [...(p.properties || []), propertyId]\n              : (p.properties || []).filter(id => id !== propertyId)\n          };\n        }\n        return p;\n      }));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          money: newMoney,\n          properties: action === 'add'\n            ? [...(prev.properties || []), propertyId]\n            : (prev.properties || []).filter(id => id !== propertyId)\n        }));\n      }\n    });\n\n    // START BONUS\n    socket.on('startBonus', ({ playerSocketId, newMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n    });\n\n    // CASINO RESULT\n    socket.on('casinoResult', ({ playerId, playerMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerId ? { ...p, money: playerMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerId) {\n        setPlayer(prev => ({ ...prev, money: playerMoney }));\n      }\n    });\n\n    // ROAD CASH RESULT\n    socket.on('roadCashResult', ({ playerSocketId, newMoney }) => {\n      // Update players list\n      setPlayers(prev => prev.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      ));\n\n      // Update current player if it's them\n      if (player?.socketId === playerSocketId) {\n        setPlayer(prev => ({ ...prev, money: newMoney }));\n      }\n    });\n\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n      socket.off('insufficientFunds');\n      socket.off('rentPaid');\n      socket.off('propertyUpdated');\n      socket.off('startBonus');\n      socket.off('casinoResult');\n      socket.off('roadCashResult');\n    };\n  }, [player?.socketId]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        player,\n        setPlayer,\n        players,\n        setPlayers,\n        currentPlayerId,\n        setCurrentPlayerId,\n        sessionId,\n        setSessionId,\n        socket,\n        gameState,\n        setGameState,\n        diceRoll,\n        setDiceRoll,\n        movementDone,\n        setMovementDone,\n        insufficientFunds,\n        setInsufficientFunds,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}