{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [player, setPlayer] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState('lobby');\n\n  // Track the latest dice roll and movement completion\n  const [diceRoll, setDiceRoll] = useState(null);\n  const [movementDone, setMovementDone] = useState(false);\n  useEffect(() => {\n    // Lobby updates\n    socket.on('lobbyUpdate', updated => {\n      setPlayers(updated);\n      const me = updated.find(p => p.socketId === socket.id);\n      if (me) setPlayer(me);\n    });\n\n    // Game start\n    socket.on('gameStart', ({\n      players: ps,\n      sessionId: sid,\n      currentPlayerId: cpId\n    }) => {\n      setPlayers(ps);\n      setSessionId(sid);\n      setGameState('playing');\n      setCurrentPlayerId(cpId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      console.log('[GameContext] gameStart → currentPlayerId:', cpId);\n    });\n\n    // Turn ended\n    socket.on('turnEnded', ({\n      nextPlayerId\n    }) => {\n      setCurrentPlayerId(nextPlayerId);\n      setDiceRoll(null);\n      setMovementDone(false);\n      console.log('[GameContext] turnEnded → nextPlayerId:', nextPlayerId);\n    });\n\n    // Dice result\n    socket.on('diceResult', ({\n      playerId,\n      die1,\n      die2,\n      total\n    }) => {\n      console.log('[GameContext] diceResult', {\n        playerId,\n        die1,\n        die2,\n        total\n      });\n      setDiceRoll({\n        playerId,\n        die1,\n        die2,\n        total\n      });\n    });\n\n    // Update player positions\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        prevTile: p.tileId,\n        tileId\n      } : p));\n      // Also update local player if it's you\n      if (player && player.socketId === playerId) {\n        setPlayer(prev => ({\n          ...prev,\n          prevTile: prev.tileId,\n          tileId\n        }));\n      }\n      console.log('[GameContext] playerMoved', {\n        playerId,\n        tileId\n      });\n    });\n\n    // Movement done flag\n    socket.on('movementDone', () => {\n      console.log('[GameContext] movementDone');\n      setMovementDone(true);\n    });\n    return () => {\n      socket.off('lobbyUpdate');\n      socket.off('gameStart');\n      socket.off('turnEnded');\n      socket.off('diceResult');\n      socket.off('playerMoved');\n      socket.off('movementDone');\n    };\n  }, [player]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      player,\n      setPlayer,\n      players,\n      setPlayers,\n      currentPlayerId,\n      setCurrentPlayerId,\n      sessionId,\n      setSessionId,\n      socket,\n      gameState,\n      setGameState,\n      diceRoll,\n      setDiceRoll,\n      movementDone,\n      setMovementDone\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"n0soz3zLFEmcwtJ5HHZirEUtR4E=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","socket","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","player","setPlayer","players","setPlayers","currentPlayerId","setCurrentPlayerId","sessionId","setSessionId","gameState","setGameState","diceRoll","setDiceRoll","movementDone","setMovementDone","on","updated","me","find","p","socketId","id","ps","sid","cpId","console","log","nextPlayerId","playerId","die1","die2","total","tileId","prev","map","prevTile","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport socket from '../socket';\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport function GameProvider({ children }) {\r\n  const [player, setPlayer] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [currentPlayerId, setCurrentPlayerId] = useState(null);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [gameState, setGameState] = useState('lobby');\r\n\r\n  // Track the latest dice roll and movement completion\r\n  const [diceRoll, setDiceRoll] = useState(null);\r\n  const [movementDone, setMovementDone] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Lobby updates\r\n    socket.on('lobbyUpdate', updated => {\r\n      setPlayers(updated);\r\n      const me = updated.find(p => p.socketId === socket.id);\r\n      if (me) setPlayer(me);\r\n    });\r\n\r\n    // Game start\r\n    socket.on('gameStart', ({ players: ps, sessionId: sid, currentPlayerId: cpId }) => {\r\n      setPlayers(ps);\r\n      setSessionId(sid);\r\n      setGameState('playing');\r\n      setCurrentPlayerId(cpId);\r\n      setDiceRoll(null);\r\n      setMovementDone(false);\r\n      console.log('[GameContext] gameStart → currentPlayerId:', cpId);\r\n    });\r\n\r\n    // Turn ended\r\n    socket.on('turnEnded', ({ nextPlayerId }) => {\r\n      setCurrentPlayerId(nextPlayerId);\r\n      setDiceRoll(null);\r\n      setMovementDone(false);\r\n      console.log('[GameContext] turnEnded → nextPlayerId:', nextPlayerId);\r\n    });\r\n\r\n    // Dice result\r\n    socket.on('diceResult', ({ playerId, die1, die2, total }) => {\r\n      console.log('[GameContext] diceResult', { playerId, die1, die2, total });\r\n      setDiceRoll({ playerId, die1, die2, total });\r\n    });\r\n\r\n    // Update player positions\r\n    socket.on('playerMoved', ({ playerId, tileId }) => {\r\n      setPlayers(prev =>\r\n        prev.map(p =>\r\n          p.socketId === playerId\r\n            ? { ...p, prevTile: p.tileId, tileId }\r\n            : p\r\n        )\r\n      );\r\n      // Also update local player if it's you\r\n      if (player && player.socketId === playerId) {\r\n        setPlayer(prev => ({ ...prev, prevTile: prev.tileId, tileId }));\r\n      }\r\n      console.log('[GameContext] playerMoved', { playerId, tileId });\r\n    });\r\n\r\n    // Movement done flag\r\n    socket.on('movementDone', () => {\r\n      console.log('[GameContext] movementDone');\r\n      setMovementDone(true);\r\n    });\r\n\r\n    return () => {\r\n      socket.off('lobbyUpdate');\r\n      socket.off('gameStart');\r\n      socket.off('turnEnded');\r\n      socket.off('diceResult');\r\n      socket.off('playerMoved');\r\n      socket.off('movementDone');\r\n    };\r\n  }, [player]);\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        player,\r\n        setPlayer,\r\n        players,\r\n        setPlayers,\r\n        currentPlayerId,\r\n        setCurrentPlayerId,\r\n        sessionId,\r\n        setSessionId,\r\n        socket,\r\n        gameState,\r\n        setGameState,\r\n        diceRoll,\r\n        setDiceRoll,\r\n        movementDone,\r\n        setMovementDone,\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC;;EAEnD;EACA,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd;IACAC,MAAM,CAACqB,EAAE,CAAC,aAAa,EAAEC,OAAO,IAAI;MAClCZ,UAAU,CAACY,OAAO,CAAC;MACnB,MAAMC,EAAE,GAAGD,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK1B,MAAM,CAAC2B,EAAE,CAAC;MACtD,IAAIJ,EAAE,EAAEf,SAAS,CAACe,EAAE,CAAC;IACvB,CAAC,CAAC;;IAEF;IACAvB,MAAM,CAACqB,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEZ,OAAO,EAAEmB,EAAE;MAAEf,SAAS,EAAEgB,GAAG;MAAElB,eAAe,EAAEmB;IAAK,CAAC,KAAK;MACjFpB,UAAU,CAACkB,EAAE,CAAC;MACdd,YAAY,CAACe,GAAG,CAAC;MACjBb,YAAY,CAAC,SAAS,CAAC;MACvBJ,kBAAkB,CAACkB,IAAI,CAAC;MACxBZ,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAC,KAAK,CAAC;MACtBW,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEF,IAAI,CAAC;IACjE,CAAC,CAAC;;IAEF;IACA9B,MAAM,CAACqB,EAAE,CAAC,WAAW,EAAE,CAAC;MAAEY;IAAa,CAAC,KAAK;MAC3CrB,kBAAkB,CAACqB,YAAY,CAAC;MAChCf,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAC,KAAK,CAAC;MACtBW,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEC,YAAY,CAAC;IACtE,CAAC,CAAC;;IAEF;IACAjC,MAAM,CAACqB,EAAE,CAAC,YAAY,EAAE,CAAC;MAAEa,QAAQ;MAAEC,IAAI;MAAEC,IAAI;MAAEC;IAAM,CAAC,KAAK;MAC3DN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE;QAAEE,QAAQ;QAAEC,IAAI;QAAEC,IAAI;QAAEC;MAAM,CAAC,CAAC;MACxEnB,WAAW,CAAC;QAAEgB,QAAQ;QAAEC,IAAI;QAAEC,IAAI;QAAEC;MAAM,CAAC,CAAC;IAC9C,CAAC,CAAC;;IAEF;IACArC,MAAM,CAACqB,EAAE,CAAC,aAAa,EAAE,CAAC;MAAEa,QAAQ;MAAEI;IAAO,CAAC,KAAK;MACjD5B,UAAU,CAAC6B,IAAI,IACbA,IAAI,CAACC,GAAG,CAACf,CAAC,IACRA,CAAC,CAACC,QAAQ,KAAKQ,QAAQ,GACnB;QAAE,GAAGT,CAAC;QAAEgB,QAAQ,EAAEhB,CAAC,CAACa,MAAM;QAAEA;MAAO,CAAC,GACpCb,CACN,CACF,CAAC;MACD;MACA,IAAIlB,MAAM,IAAIA,MAAM,CAACmB,QAAQ,KAAKQ,QAAQ,EAAE;QAC1C1B,SAAS,CAAC+B,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEE,QAAQ,EAAEF,IAAI,CAACD,MAAM;UAAEA;QAAO,CAAC,CAAC,CAAC;MACjE;MACAP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE;QAAEE,QAAQ;QAAEI;MAAO,CAAC,CAAC;IAChE,CAAC,CAAC;;IAEF;IACAtC,MAAM,CAACqB,EAAE,CAAC,cAAc,EAAE,MAAM;MAC9BU,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCZ,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXpB,MAAM,CAAC0C,GAAG,CAAC,aAAa,CAAC;MACzB1C,MAAM,CAAC0C,GAAG,CAAC,WAAW,CAAC;MACvB1C,MAAM,CAAC0C,GAAG,CAAC,WAAW,CAAC;MACvB1C,MAAM,CAAC0C,GAAG,CAAC,YAAY,CAAC;MACxB1C,MAAM,CAAC0C,GAAG,CAAC,aAAa,CAAC;MACzB1C,MAAM,CAAC0C,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAACnC,MAAM,CAAC,CAAC;EAEZ,oBACEL,OAAA,CAACC,WAAW,CAACwC,QAAQ;IACnBC,KAAK,EAAE;MACLrC,MAAM;MACNC,SAAS;MACTC,OAAO;MACPC,UAAU;MACVC,eAAe;MACfC,kBAAkB;MAClBC,SAAS;MACTC,YAAY;MACZd,MAAM;MACNe,SAAS;MACTC,YAAY;MACZC,QAAQ;MACRC,WAAW;MACXC,YAAY;MACZC;IACF,CAAE;IAAAf,QAAA,EAEDA;EAAQ;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC1C,EAAA,CAnGeF,YAAY;AAAA6C,EAAA,GAAZ7C,YAAY;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}