{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\addhy\\\\Desktop\\\\Business_web - Copy (2)\\\\client\\\\src\\\\components\\\\GameScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport bgImage from '../assets/bg.png';\nimport Dicebox from '../assets/diceBoard.png';\nimport Board from './Board';\nimport DiceRoller from './DiceRoller';\nimport Dashboard from './Dashboard';\nimport PlayerStats from './PlayerStats';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GameScreen() {\n  _s();\n  const {\n    player,\n    players,\n    setPlayer,\n    setPlayers,\n    currentPlayerId,\n    socket,\n    movementDone\n  } = useContext(GameContext);\n  const isMyTurn = (player === null || player === void 0 ? void 0 : player.socketId) === currentPlayerId;\n  const [error, setError] = useState(null);\n\n  // Determine metadata for the current tile\n  const tileMeta = tiles.find(t => t.id === (player === null || player === void 0 ? void 0 : player.tileId));\n\n  // Debug logging to trace condition\n  useEffect(() => {\n    console.log('[GameScreen] Debug:', {\n      isMyTurn,\n      movementDone,\n      tileMeta,\n      \"player.tileId\": player === null || player === void 0 ? void 0 : player.tileId,\n      \"tileMeta.type\": tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.type,\n      \"tileMeta.cost\": tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.cost,\n      \"player.money\": player === null || player === void 0 ? void 0 : player.money\n    });\n  }, [isMyTurn, movementDone, tileMeta, player]);\n\n  // Listen for purchase events\n  useEffect(() => {\n    socket.on('purchaseSuccess', ({\n      socketId,\n      money,\n      properties\n    }) => {\n      console.log('[GameScreen] purchaseSuccess', {\n        socketId,\n        money,\n        properties\n      });\n      const updated = players.map(p => p.socketId === socketId ? {\n        ...p,\n        money,\n        properties\n      } : p);\n      setPlayers(updated);\n      if (player.socketId === socketId) {\n        setPlayer({\n          ...player,\n          money,\n          properties\n        });\n      }\n      setError(null);\n    });\n\n    // Add playerMoved event handler\n    socket.on('playerMoved', ({\n      playerId,\n      tileId\n    }) => {\n      console.log('[GameScreen] playerMoved', {\n        playerId,\n        tileId\n      });\n      if (playerId === (player === null || player === void 0 ? void 0 : player.socketId)) {\n        setPlayer(prev => ({\n          ...prev,\n          tileId\n        }));\n      }\n      setPlayers(prev => prev.map(p => p.socketId === playerId ? {\n        ...p,\n        tileId\n      } : p));\n      // Clear any previous messages when a player moves\n      setError(null);\n    });\n    socket.on('purchaseFailed', ({\n      reason\n    }) => {\n      console.log('[GameScreen] purchaseFailed', reason);\n      if (reason === 'insufficientFunds') {\n        setError(\"You don't have enough money.\");\n      } else if (reason === 'alreadyOwned') {\n        setError('You already own this property.');\n      } else {\n        setError('Cannot buy this property.');\n      }\n      // Clear error message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent payment handler\n    socket.on('rentPaid', ({\n      payerSocketId,\n      payerMoney,\n      ownerSocketId,\n      ownerMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameScreen] rentPaid', {\n        payerSocketId,\n        ownerSocketId,\n        amount\n      });\n\n      // Update players' money\n      const updated = players.map(p => {\n        if (p.socketId === payerSocketId) return {\n          ...p,\n          money: payerMoney\n        };\n        if (p.socketId === ownerSocketId) return {\n          ...p,\n          money: ownerMoney\n        };\n        return p;\n      });\n      setPlayers(updated);\n\n      // Update current player's money if they were involved\n      if (player.socketId === payerSocketId) {\n        var _players$find;\n        setPlayer({\n          ...player,\n          money: payerMoney\n        });\n        setError(`You paid $${amount} rent to ${(_players$find = players.find(p => p.socketId === ownerSocketId)) === null || _players$find === void 0 ? void 0 : _players$find.name} for landing on ${propertyName}`);\n      } else if (player.socketId === ownerSocketId) {\n        var _players$find2;\n        setPlayer({\n          ...player,\n          money: ownerMoney\n        });\n        setError(`You received $${amount} rent from ${(_players$find2 = players.find(p => p.socketId === payerSocketId)) === null || _players$find2 === void 0 ? void 0 : _players$find2.name} for ${propertyName}`);\n      }\n      // Clear rent message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent bonus handler\n    socket.on('rentBonus', ({\n      playerSocketId,\n      newMoney,\n      amount,\n      propertyName\n    }) => {\n      console.log('[GameScreen] rentBonus', {\n        playerSocketId,\n        amount\n      });\n\n      // Update player's money\n      const updated = players.map(p => p.socketId === playerSocketId ? {\n        ...p,\n        money: newMoney\n      } : p);\n      setPlayers(updated);\n\n      // Update current player if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({\n          ...player,\n          money: newMoney\n        });\n        setError(`You received $${amount} bonus for landing on your property ${propertyName}!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n    return () => {\n      socket.off('purchaseSuccess');\n      socket.off('purchaseFailed');\n      socket.off('rentPaid');\n      socket.off('playerMoved');\n      socket.off('rentBonus');\n    };\n  }, [socket, player, players, setPlayer, setPlayers]);\n  const handleBuy = () => {\n    console.log('[GameScreen] handleBuy invoked');\n    setError(null);\n    socket.emit('buyProperty');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      position: 'relative',\n      backgroundImage: `url(${bgImage})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '240px',\n        display: 'flex',\n        zIndex: 100,\n        background: 'rgba(80, 80, 80, 0.61)',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.2)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          position: 'relative',\n          height: '100%',\n          borderRight: '1px solid #333',\n          overflow: 'hidden'\n        },\n        children: [isMyTurn && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Dicebox,\n          alt: \"Dice Board\",\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            objectFit: 'fill',\n            pointerEvents: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DiceRoller, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          borderRight: '1px solid #333',\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: (() => {\n          // Check if any player owns this property\n          const isPropertyOwned = players.some(p => p.properties.includes(tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.id));\n          const show = isMyTurn && movementDone && (tileMeta === null || tileMeta === void 0 ? void 0 : tileMeta.type) === 'property' && !isPropertyOwned;\n          console.log('[GameScreen] isMyTurn?', isMyTurn);\n          console.log('[GameScreen] movementDone?', movementDone);\n          console.log('[GameScreen] tileMeta)?', tileMeta);\n          console.log('[GameScreen] isPropertyOwned?', isPropertyOwned);\n          console.log('[GameScreen] render Buy?', show);\n          return show ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleBuy,\n              disabled: player.money < tileMeta.cost,\n              style: {\n                padding: '8px 16px',\n                margin: '4px'\n              },\n              children: [\"Buy ($\", tileMeta.cost, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'tomato',\n                marginTop: '8px'\n              },\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'tomato',\n              marginTop: '8px'\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 24\n          }, this);\n        })()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          borderRight: '1px solid #333',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '240px',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minWidth: 220,\n          height: '80%',\n          marginRight: 48,\n          background: 'rgba(206, 206, 206, 0.96)',\n          borderRight: '2px solid #d3d3d3',\n          borderRadius: 12,\n          boxShadow: '0 0 12px 0 #eee',\n          padding: '16px 10px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'stretch'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            textAlign: 'center',\n            margin: 0,\n            marginBottom: 10\n          },\n          children: \"Other Players\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PlayerStats, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          zIndex: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        background: 'rgba(80, 80, 80, 0.61)',\n        borderTop: '2px solid #bbb',\n        boxShadow: '0 -2px 10px #ececec',\n        padding: '0 0 18px 0',\n        zIndex: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(GameScreen, \"rCEsWIqLehiappTzfH9LAxoCr08=\");\n_c = GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useContext","useState","useEffect","bgImage","Dicebox","Board","DiceRoller","Dashboard","PlayerStats","GameContext","tiles","jsxDEV","_jsxDEV","Fragment","_Fragment","GameScreen","_s","player","players","setPlayer","setPlayers","currentPlayerId","socket","movementDone","isMyTurn","socketId","error","setError","tileMeta","find","t","id","tileId","console","log","type","cost","money","on","properties","updated","map","p","playerId","prev","reason","setTimeout","payerSocketId","payerMoney","ownerSocketId","ownerMoney","amount","propertyName","_players$find","name","_players$find2","playerSocketId","newMoney","off","handleBuy","emit","style","display","flexDirection","minHeight","position","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","overflow","children","top","left","width","height","zIndex","background","boxShadow","flex","borderRight","src","alt","objectFit","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","justifyContent","isPropertyOwned","some","includes","show","onClick","disabled","padding","margin","color","marginTop","minWidth","marginRight","borderRadius","textAlign","marginBottom","borderTop","_c","$RefreshReg$"],"sources":["C:/Users/addhy/Desktop/Business_web - Copy (2)/client/src/components/GameScreen.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport bgImage from '../assets/bg.png';\nimport Dicebox from '../assets/diceBoard.png';\nimport Board from './Board';\nimport DiceRoller from './DiceRoller';\nimport Dashboard from './Dashboard';\nimport PlayerStats from './PlayerStats';\nimport { GameContext } from '../context/GameContext';\nimport { tiles } from '../data/tiles';\n\nexport default function GameScreen() {\n  const {\n    player,\n    players,\n    setPlayer,\n    setPlayers,\n    currentPlayerId,\n    socket,\n    movementDone\n  } = useContext(GameContext);\n\n  const isMyTurn = player?.socketId === currentPlayerId;\n  const [error, setError] = useState(null);\n\n  // Determine metadata for the current tile\n  const tileMeta = tiles.find(t => t.id === player?.tileId);\n\n  // Debug logging to trace condition\n  useEffect(() => {\n    console.log('[GameScreen] Debug:', {\n      isMyTurn,\n      movementDone,\n      tileMeta,\n      \"player.tileId\": player?.tileId,\n      \"tileMeta.type\": tileMeta?.type,\n      \"tileMeta.cost\": tileMeta?.cost,\n      \"player.money\": player?.money\n    });\n  }, [isMyTurn, movementDone, tileMeta, player]);\n\n  // Listen for purchase events\n  useEffect(() => {\n    socket.on('purchaseSuccess', ({ socketId, money, properties }) => {\n      console.log('[GameScreen] purchaseSuccess', { socketId, money, properties });\n      const updated = players.map(p =>\n        p.socketId === socketId ? { ...p, money, properties } : p\n      );\n      setPlayers(updated);\n      if (player.socketId === socketId) {\n        setPlayer({ ...player, money, properties });\n      }\n      setError(null);\n    });\n\n    // Add playerMoved event handler\n    socket.on('playerMoved', ({ playerId, tileId }) => {\n      console.log('[GameScreen] playerMoved', { playerId, tileId });\n      if (playerId === player?.socketId) {\n        setPlayer(prev => ({ ...prev, tileId }));\n      }\n      setPlayers(prev => \n        prev.map(p => p.socketId === playerId ? { ...p, tileId } : p)\n      );\n      // Clear any previous messages when a player moves\n      setError(null);\n    });\n\n    socket.on('purchaseFailed', ({ reason }) => {\n      console.log('[GameScreen] purchaseFailed', reason);\n      if (reason === 'insufficientFunds') {\n        setError(\"You don't have enough money.\");\n      } else if (reason === 'alreadyOwned') {\n        setError('You already own this property.');\n      } else {\n        setError('Cannot buy this property.');\n      }\n      // Clear error message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent payment handler\n    socket.on('rentPaid', ({ payerSocketId, payerMoney, ownerSocketId, ownerMoney, amount, propertyName }) => {\n      console.log('[GameScreen] rentPaid', { payerSocketId, ownerSocketId, amount });\n      \n      // Update players' money\n      const updated = players.map(p => {\n        if (p.socketId === payerSocketId) return { ...p, money: payerMoney };\n        if (p.socketId === ownerSocketId) return { ...p, money: ownerMoney };\n        return p;\n      });\n      setPlayers(updated);\n\n      // Update current player's money if they were involved\n      if (player.socketId === payerSocketId) {\n        setPlayer({ ...player, money: payerMoney });\n        setError(`You paid $${amount} rent to ${players.find(p => p.socketId === ownerSocketId)?.name} for landing on ${propertyName}`);\n      } else if (player.socketId === ownerSocketId) {\n        setPlayer({ ...player, money: ownerMoney });\n        setError(`You received $${amount} rent from ${players.find(p => p.socketId === payerSocketId)?.name} for ${propertyName}`);\n      }\n      // Clear rent message after 5 seconds\n      setTimeout(() => setError(null), 5000);\n    });\n\n    // Add rent bonus handler\n    socket.on('rentBonus', ({ playerSocketId, newMoney, amount, propertyName }) => {\n      console.log('[GameScreen] rentBonus', { playerSocketId, amount });\n      \n      // Update player's money\n      const updated = players.map(p =>\n        p.socketId === playerSocketId ? { ...p, money: newMoney } : p\n      );\n      setPlayers(updated);\n\n      // Update current player if they got the bonus\n      if (player.socketId === playerSocketId) {\n        setPlayer({ ...player, money: newMoney });\n        setError(`You received $${amount} bonus for landing on your property ${propertyName}!`);\n        // Clear bonus message after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    });\n\n    return () => {\n      socket.off('purchaseSuccess');\n      socket.off('purchaseFailed');\n      socket.off('rentPaid');\n      socket.off('playerMoved');\n      socket.off('rentBonus');\n    };\n  }, [socket, player, players, setPlayer, setPlayers]);\n\n  const handleBuy = () => {\n    console.log('[GameScreen] handleBuy invoked');\n    setError(null);\n    socket.emit('buyProperty');\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        position: 'relative',\n        backgroundImage: `url(${bgImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        overflow: 'hidden'\n      }}\n    >\n      {/* Top bar with 4 quarters */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '240px',\n          display: 'flex',\n          zIndex: 100,\n          background: 'rgba(80, 80, 80, 0.61)',\n          boxShadow: '0 2px 8px rgba(0,0,0,0.2)'\n        }}\n      >\n        {/* 1st quarter: Dice board */}\n        <div\n          style={{\n            flex: 1,\n            position: 'relative',\n            height: '100%',\n            borderRight: '1px solid #333',\n            overflow: 'hidden'\n          }}\n        >\n          {isMyTurn && (\n            <img\n              src={Dicebox}\n              alt=\"Dice Board\"\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                objectFit: 'fill',\n                pointerEvents: 'none'\n              }}\n            />\n          )}\n          <DiceRoller />\n        </div>\n\n        {/* 2nd quarter: Buy  */}\n        <div\n          style={{\n            flex: 1,\n            borderRight: '1px solid #333',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          {(() => {\n            // Check if any player owns this property\n            const isPropertyOwned = players.some(p => p.properties.includes(tileMeta?.id));\n            const show = isMyTurn && movementDone && tileMeta?.type === 'property' && !isPropertyOwned;\n            \n            console.log('[GameScreen] isMyTurn?', isMyTurn);\n            console.log('[GameScreen] movementDone?', movementDone);\n            console.log('[GameScreen] tileMeta)?', tileMeta);\n            console.log('[GameScreen] isPropertyOwned?', isPropertyOwned);\n            console.log('[GameScreen] render Buy?', show);\n            \n            return show ? (\n              <>\n                <button\n                  onClick={handleBuy}\n                  disabled={player.money < tileMeta.cost}\n                  style={{ padding: '8px 16px', margin: '4px' }}\n                >\n                  Buy (${tileMeta.cost})\n                </button>\n            \n                {error && (\n                  <p style={{ color: 'tomato', marginTop: '8px' }}>{error}</p>\n                )}\n              </>\n            ) : (\n              error && <p style={{ color: 'tomato', marginTop: '8px' }}>{error}</p>\n            );\n          })()}\n        </div>\n\n        {/* 3rd & 4th quarters */}\n        <div style={{ flex: 1, borderRight: '1px solid #333', height: '100%' }} />\n        <div style={{ flex: 1, height: '100%' }} />\n      </div>\n\n      {/* Main content (board & dashboards) */}\n      <div\n        style={{\n          marginTop: '240px',\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          position: 'relative'\n        }}\n      >\n        <div\n          style={{\n            minWidth: 220,\n            height: '80%',\n            marginRight: 48,\n            background: 'rgba(206, 206, 206, 0.96)',\n            borderRight: '2px solid #d3d3d3',\n            borderRadius: 12,\n            boxShadow: '0 0 12px 0 #eee',\n            padding: '16px 10px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'stretch'\n          }}\n        >\n          <h4 style={{ textAlign: 'center', margin: 0, marginBottom: 10 }}>\n            Other Players\n          </h4>\n          <PlayerStats />\n        </div>\n\n        <div style={{ position: 'relative', zIndex: 2 }}>\n          <Board />\n        </div>\n      </div>\n\n      {/* Bottom dashboard */}\n      <div\n        style={{\n          width: '100%',\n          background: 'rgba(80, 80, 80, 0.61)',\n          borderTop: '2px solid #bbb',\n          boxShadow: '0 -2px 10px #ececec',\n          padding: '0 0 18px 0',\n          zIndex: 10\n        }}\n      >\n        <Dashboard />\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}